{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Nightscout \u2301 Introduction \u2301 Nightscout (CGM in the Cloud) is an open source cloud application, which you can install yourself using free hosting from various cloud service providers. You might also need or prefer to use paid hosting services for your database size needs or to avoid the difficulties in building and maintaining your site. Once setup, Nightscout acts as a central repository of blood glucose and insulin dosing data for a single person, allowing you to view the CGM graph and other data anywhere using a web browser. The CGM data is sent to Nightscout using an uploader application such as xDrip+, Spike or Medtronic uploader, running on a mobile phone carried by the person being monitored, or directly from your Dexcom or CareLink account. The application you'll need for uploading the data depends on which CGM device you're using. In addition to viewing the data using a web browser, there are several applications available for mobile devices and smart watches, which allow you alternate ways to view the information. Once you have Nightscout up and running, you'll get a view that looks something like this: IMPORTANT Please understand that this project: Is highly experimental Is not approved for therapy You take full responsibility for building and running this system and do so at your own risk. SAFETY This project requires internet availability and third party cloud services availability. Do not rely only on it Make sure you're ready to cope with an unexpected failure You are building your own Nightscout site and will be sole responsible for its functioning and its use. Development History \u2301 Nightscout was developed by parents of children with Type 1 Diabetes and has continued to be developed, maintained, and supported by volunteers. When first implemented, Nightscout was a solution specifically for remote monitoring of Dexcom G4 CGM data. Today, there are Nightscout solutions available for many CGM sensors. The goal of the project is to allow remote monitoring of a T1D\u2019s glucose level using existing monitoring devices. What Does It Cost? \u2301 Cost varies based on the setup you will need. You can build your Nightscout site and operate it entirely for free but you might experience some limitations. Keep in mind free hosting services will require you to maintain them. Free databases like M0 Sandbox provided by Atlas will only hold a limited amount of data (512MB) and you will eventually need to manually cleanup. You can extend the capacity to 2 and 5GB paying an M2 or M5 Shared cluster. Heroku Free dynos plan will not prevent your app to fall asleep in certain cases and you might need to setup an Uptime robot to prevent this. You can also make it always available upgrading to a Hobby plan. You can opt for a paid service if you prefer. What Do I Need? \u2301 A CGM sensor: Dexcom, Medtronic, Libre (plus an additional transmitter) or Eversense. An uploader : a mobile phone with the matching app. Internet access. Basic skills in using a computer and following a procedure. Who Will Help Me? \u2301 You will find open heart people in many Facebook groups, there are many Nightscout communities and most probably you'll find one in your own country and language. Main Facebook group: https://www.facebook.com/groups/cgminthecloud/ Regarding support This project is DIY and supported by volunteers. Whilst you most probably will find someone ready to help for free, building your own Nightscout site doesn't entitle you to any form of support. Nightscout developers are busy people and we'd like them to concentrate on maintaining and improving Nightscout, not only supporting users. I would prefer to pay someone else to manage it for me... \u2301 Then T1Pal is what you need. T1Pal has been designed by Ben West, a member of the original CGM in the Cloud team and a an original lead core developer for the Nightscout Project. How to Use These Docs \u2301 Use the navigation menu at the top of the screen to find the info you are looking for. A Table of Contents for the current page is always displayed on the left side of the screen. You can search the Nightscout Docs site by clicking the icon.","title":"Nightscout"},{"location":"#welcome-to-nightscout","text":"","title":"Welcome to Nightscout"},{"location":"#introduction","text":"Nightscout (CGM in the Cloud) is an open source cloud application, which you can install yourself using free hosting from various cloud service providers. You might also need or prefer to use paid hosting services for your database size needs or to avoid the difficulties in building and maintaining your site. Once setup, Nightscout acts as a central repository of blood glucose and insulin dosing data for a single person, allowing you to view the CGM graph and other data anywhere using a web browser. The CGM data is sent to Nightscout using an uploader application such as xDrip+, Spike or Medtronic uploader, running on a mobile phone carried by the person being monitored, or directly from your Dexcom or CareLink account. The application you'll need for uploading the data depends on which CGM device you're using. In addition to viewing the data using a web browser, there are several applications available for mobile devices and smart watches, which allow you alternate ways to view the information. Once you have Nightscout up and running, you'll get a view that looks something like this: IMPORTANT Please understand that this project: Is highly experimental Is not approved for therapy You take full responsibility for building and running this system and do so at your own risk. SAFETY This project requires internet availability and third party cloud services availability. Do not rely only on it Make sure you're ready to cope with an unexpected failure You are building your own Nightscout site and will be sole responsible for its functioning and its use.","title":"Introduction"},{"location":"#development-history","text":"Nightscout was developed by parents of children with Type 1 Diabetes and has continued to be developed, maintained, and supported by volunteers. When first implemented, Nightscout was a solution specifically for remote monitoring of Dexcom G4 CGM data. Today, there are Nightscout solutions available for many CGM sensors. The goal of the project is to allow remote monitoring of a T1D\u2019s glucose level using existing monitoring devices.","title":"Development History"},{"location":"#what-does-it-cost","text":"Cost varies based on the setup you will need. You can build your Nightscout site and operate it entirely for free but you might experience some limitations. Keep in mind free hosting services will require you to maintain them. Free databases like M0 Sandbox provided by Atlas will only hold a limited amount of data (512MB) and you will eventually need to manually cleanup. You can extend the capacity to 2 and 5GB paying an M2 or M5 Shared cluster. Heroku Free dynos plan will not prevent your app to fall asleep in certain cases and you might need to setup an Uptime robot to prevent this. You can also make it always available upgrading to a Hobby plan. You can opt for a paid service if you prefer.","title":"What Does It Cost?"},{"location":"#what-do-i-need","text":"A CGM sensor: Dexcom, Medtronic, Libre (plus an additional transmitter) or Eversense. An uploader : a mobile phone with the matching app. Internet access. Basic skills in using a computer and following a procedure.","title":"What Do I Need?"},{"location":"#who-will-help-me","text":"You will find open heart people in many Facebook groups, there are many Nightscout communities and most probably you'll find one in your own country and language. Main Facebook group: https://www.facebook.com/groups/cgminthecloud/ Regarding support This project is DIY and supported by volunteers. Whilst you most probably will find someone ready to help for free, building your own Nightscout site doesn't entitle you to any form of support. Nightscout developers are busy people and we'd like them to concentrate on maintaining and improving Nightscout, not only supporting users.","title":"Who Will Help Me?"},{"location":"#i-would-prefer-to-pay-someone-else-to-manage-it-for-me","text":"Then T1Pal is what you need. T1Pal has been designed by Ben West, a member of the original CGM in the Cloud team and a an original lead core developer for the Nightscout Project.","title":"I would prefer to pay someone else to manage it for me..."},{"location":"#how-to-use-these-docs","text":"Use the navigation menu at the top of the screen to find the info you are looking for. A Table of Contents for the current page is always displayed on the left side of the screen. You can search the Nightscout Docs site by clicking the icon.","title":"How to Use These Docs"},{"location":"nightscout/close_loop/","text":"Loop \u2301 OpenAPS \u2301 AAPS \u2301","title":"Close the loop"},{"location":"nightscout/close_loop/#loop","text":"","title":"Loop"},{"location":"nightscout/close_loop/#openaps","text":"","title":"OpenAPS"},{"location":"nightscout/close_loop/#aaps","text":"","title":"AAPS"},{"location":"nightscout/followers/","text":"","title":"Followers"},{"location":"nightscout/ifttt/","text":"IFTTT Integration \u2301 If This, Then That (IFTTT) is a useful Nightscout integration. By using IFTTT, you can have single button presses on your iPhone that will set an override, log a cannula change, log a sensor change and much more. Step 1: Get your API Secret Hash \u2301 First we need to gather one thing called your \"hashed API Secret\". In your internet browser, open a \"console\" window while viewing your Nightscout site. Make sure you have \"authenticated\" your site by using your API secret in the Nightscout settings area (hint: if you see a little padlock in the upper left corner of the site, you haven't authenticated it). Refresh the site and your hashed secret key will be shown as \"apisecrethash: \"xxxxxxxxxx...\"\" For Safari users on Mac , you can open the console window by selecting \"Develop\" from the Safari top menu, and then \"Show Page Source\" (if you do not see \"Develop\" in the top menu, activate it by going to Safari > Preferences... > Advanced, and checking the \"Show Develop menu in menu bar\" option). If you're having problems seeing the apisecrethash, click the little grey triangle next to the \"status isAuthenticated\" line and the objects below it will display (see screenshot). Your hashed API secret can be copied and pasted from that line, as shown below. Save that somewhere easy to get to again, because you will be using it later. For Chrome users , the console window is found through the View >> Developer >> View Source. Click on the Console tab and scroll to find the \"status isAuthenticated\" row to find your apisecrethash. Copy your API hash to somewhere you can retreive it again, we will be copy/pasting it in Step 2. Step 2: Create your \"Applets\" \u2301 IFTTT calls their little actions that you'll create an \"applet\". I have no idea why. But, I will go along and use their terminology so we are all consistent. We are basically interested in creating applets that will be buttons on your phone to do cool things in Nightscout. So, you'll have a button that will log when you changed your sensor last...letting you see in Nightscout easily just how old a sensor is at any given time. Or you can create a button that will turn on an \"exercise\" override that you already programmed into your kid's Loop app. So, let's make our first applet (aka button). Get an IFTTT account Login to your IFTTT.com account and select click this link to get to the page for creating your first \"New Applet\". (You can also get to this Applet creation page by selecting your Account icon in the upper right of the IFTTT website, then clicking on \"Create\".) In the screen that appears, click on the black \"+this\" part of the screen In the next screen, type \"button\" in the search field and then click on the red box labelled \"ButtonWidget\" Connect the button widget by clicking on the large black\"connect\" button twice, once on the main screen and then second on the pop-up window that will appear immediately after that. (You will only have to \"connect\" the widgets for the first applet you make. After that the widgets will already connected to your IFTTT account.) Click on the large red \"button press\" box Click on the black \"+that\" text Enter \"Webhooks\" in the search field and click on the Webhooks app Connect the Webhooks app Select the blue \"Make a Web Request\" box Now you will have a blank web request template to complete. Screenshot below is an example of a completed recipe for eating soon IFTTT action. There are four parts you will need to fill in, and they are described below the screenshot. URL https://yoursite.herokuapp.com/api/v1/treatments.json (for all IFTTT recipes that are NOT remote overrides...so things like cannula changes, sensor changes, pump battery changes, etc.) Change the \"yoursite\" to your actual site's info. Method The method will be POST Content Type The content type will be application/json . Body The content of the body will depend on the action that you would like this particular button press to perform. While many recipes are available, any recipe that log carbs to NS will only display the carbs in Nightscout...Loop will not \"use\" those carbs in treatment or prediction math. The display of carbs in NS though may still be helpful for remote care givers to leave an indication that a low is being noticed and treated. Some sample content for actions that may be useful in Loop: Pump Site Change {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Site Change\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"} CGM Sensor Start {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Sensor Start\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"} Note {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Note\", \"notes\": \"Hi mom, please don't text me for a bit. I'm taking a test.\", \"secret\": \"your_hashed_api_goes_here!!!\"} Special note for IFTTT to set a Remote Override with dev branch Triggering a remote override with IFTTT takes a couple considerations; 1. You have followed the directions for setting up remote overrides in Nightscout already. 2. Remote overrides will use https://yoursite.herokuapp.com/api/v2/notifications/loop for the URL line of the applet. Notice that is different from the other type of applets' URL. 3. The Body message of the applet needs to match the override already programmed in Loop app; the reason, reasonDisplay, and duration all need to match what is preset in your Loop app. The \"duration\" is giving in minutes in the body message (vs hours in Loop), and if the override is one that is \"enabled indefinitely\" then the duration is \"infinite\". The \"reason\" is the name of the override but NO EMOJI, and the \"reasonDisplay\" is the override name with the emoji. Check out the samples Body messages for overrides below. You will have to edit your body messages to match your reason and reasonDisplay. The target range and duration of the override does not need to be specified. Body message for override named \"hormones\" {\"eventType\": \"Temporary Override\", \"reason\": \"hormones\", \"reasonDisplay\": \"\ud83e\udddf\u200d\u2640\ufe0f hormones\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message for override named \"running\" {\"eventType\": \"Temporary Override\", \"reason\": \"running\", \"reasonDisplay\": \"\ud83c\udfc3\u200d\u2640\ufe0f running\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message for override named \"Low Treatment\" {\"eventType\": \"Temporary Override\", \"reason\": \"Low Treatment\", \"reasonDisplay\": \"\ud83c\udf6c Low Treatment\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message to cancel any override {\"eventType\": \"Temporary Override Cancel\", \"secret\": \"your_hashed_api_goes_here!!!\"} Click the Create Action button on the bottom of the screen when you finish. Now is your chance to change the title of your applet now to something meaningful. You can turn on notifications, too, using the slider shown. If you turn on the notifications, you will get an alert on your phone and pebble watch when the button press has been successfully deployed. Finish the IFTTT button by clicking on the Finish button that appears. Repeat the setup for new applets for as many automated actions/overrides as you would like to setup. Step 3: Enable IFTTT in your Nightscout site \u2301 Now that we have cool applets made, we need to give Nightscout some information so that it will accept commands from our applets. It's pretty simple to do...just a couple additions to your Heroku settings. Find your Maker Key by going to your IFTTT account icon in upper right corner, choose \"My services\" and then click on the Webhooks service, settings. You will see your Maker Key as the last part of the URL after the use/ ; copy and paste that last part (the red circled part as shown) Login to your Nightscout site host (azure or heroku) and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line. Step 4: Install IFTTT app on your iPhone/Android \u2301 Now that all the hard work is done, we can take easy street and just add that work to the phone via the IFTTT app. By accessing the IFTTT widget on your iPhone, you'll be able to easily and quickly access the useful buttons you've just created. Download the IFTTT app on your phone and log in using your IFTTT account. For iPhone users, if you swipe right from your iPhone's home screen, you will have the Today view showing. Scroll to the bottom, click \"edit\". This should show a list of existing widgets, followed by a list of \"more widgets\" with green + signs. Click on the IFTTT's green circle and the widget will be moved to the top, active widgets area. You can hold your finger on the three left lines of the IFTTT widget row to drag it to the top of your widget panel, if you prefer to have it as the top-most widget. If you end up with more than four IFTTT applets, they will appear in reverse-order of when they were created...which may not be the same as you'd prefer them to appear on your widget bar. If you'd like to reorder them: go into your iPhone's IFTTT app click on My Applets click on the gear icon in upper left of screen click on Widgets click on the pencil icon in upper right of screen click and hold the three lines that appear on the right side of the widget that you want to move. Drag the widget to the order in the list that you'd like it to appear in your widget quickscreen. Extra Credit: Alexa integration \u2301 Since you have IFTTT/Maker requests working, you can get it to work with anything that supports IFTTT, including Alexa. You will need to add \"alexa\" to your ENABLE line in your Heroku settings. And then repeat the steps above, but instead of using \"ButtonWidget\" service we started with earlier (the \"+if\" part of the setup)...you will use the \"AmazonAlexa\" service. Alexa requests do not need underscores, FYI.","title":"IF This Then That"},{"location":"nightscout/ifttt/#ifttt-integration","text":"If This, Then That (IFTTT) is a useful Nightscout integration. By using IFTTT, you can have single button presses on your iPhone that will set an override, log a cannula change, log a sensor change and much more.","title":"IFTTT Integration"},{"location":"nightscout/ifttt/#step-1-get-your-api-secret-hash","text":"First we need to gather one thing called your \"hashed API Secret\". In your internet browser, open a \"console\" window while viewing your Nightscout site. Make sure you have \"authenticated\" your site by using your API secret in the Nightscout settings area (hint: if you see a little padlock in the upper left corner of the site, you haven't authenticated it). Refresh the site and your hashed secret key will be shown as \"apisecrethash: \"xxxxxxxxxx...\"\" For Safari users on Mac , you can open the console window by selecting \"Develop\" from the Safari top menu, and then \"Show Page Source\" (if you do not see \"Develop\" in the top menu, activate it by going to Safari > Preferences... > Advanced, and checking the \"Show Develop menu in menu bar\" option). If you're having problems seeing the apisecrethash, click the little grey triangle next to the \"status isAuthenticated\" line and the objects below it will display (see screenshot). Your hashed API secret can be copied and pasted from that line, as shown below. Save that somewhere easy to get to again, because you will be using it later. For Chrome users , the console window is found through the View >> Developer >> View Source. Click on the Console tab and scroll to find the \"status isAuthenticated\" row to find your apisecrethash. Copy your API hash to somewhere you can retreive it again, we will be copy/pasting it in Step 2.","title":"Step 1: Get your API Secret Hash"},{"location":"nightscout/ifttt/#step-2-create-your-applets","text":"IFTTT calls their little actions that you'll create an \"applet\". I have no idea why. But, I will go along and use their terminology so we are all consistent. We are basically interested in creating applets that will be buttons on your phone to do cool things in Nightscout. So, you'll have a button that will log when you changed your sensor last...letting you see in Nightscout easily just how old a sensor is at any given time. Or you can create a button that will turn on an \"exercise\" override that you already programmed into your kid's Loop app. So, let's make our first applet (aka button). Get an IFTTT account Login to your IFTTT.com account and select click this link to get to the page for creating your first \"New Applet\". (You can also get to this Applet creation page by selecting your Account icon in the upper right of the IFTTT website, then clicking on \"Create\".) In the screen that appears, click on the black \"+this\" part of the screen In the next screen, type \"button\" in the search field and then click on the red box labelled \"ButtonWidget\" Connect the button widget by clicking on the large black\"connect\" button twice, once on the main screen and then second on the pop-up window that will appear immediately after that. (You will only have to \"connect\" the widgets for the first applet you make. After that the widgets will already connected to your IFTTT account.) Click on the large red \"button press\" box Click on the black \"+that\" text Enter \"Webhooks\" in the search field and click on the Webhooks app Connect the Webhooks app Select the blue \"Make a Web Request\" box Now you will have a blank web request template to complete. Screenshot below is an example of a completed recipe for eating soon IFTTT action. There are four parts you will need to fill in, and they are described below the screenshot. URL https://yoursite.herokuapp.com/api/v1/treatments.json (for all IFTTT recipes that are NOT remote overrides...so things like cannula changes, sensor changes, pump battery changes, etc.) Change the \"yoursite\" to your actual site's info. Method The method will be POST Content Type The content type will be application/json . Body The content of the body will depend on the action that you would like this particular button press to perform. While many recipes are available, any recipe that log carbs to NS will only display the carbs in Nightscout...Loop will not \"use\" those carbs in treatment or prediction math. The display of carbs in NS though may still be helpful for remote care givers to leave an indication that a low is being noticed and treated. Some sample content for actions that may be useful in Loop: Pump Site Change {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Site Change\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"} CGM Sensor Start {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Sensor Start\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"} Note {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Note\", \"notes\": \"Hi mom, please don't text me for a bit. I'm taking a test.\", \"secret\": \"your_hashed_api_goes_here!!!\"} Special note for IFTTT to set a Remote Override with dev branch Triggering a remote override with IFTTT takes a couple considerations; 1. You have followed the directions for setting up remote overrides in Nightscout already. 2. Remote overrides will use https://yoursite.herokuapp.com/api/v2/notifications/loop for the URL line of the applet. Notice that is different from the other type of applets' URL. 3. The Body message of the applet needs to match the override already programmed in Loop app; the reason, reasonDisplay, and duration all need to match what is preset in your Loop app. The \"duration\" is giving in minutes in the body message (vs hours in Loop), and if the override is one that is \"enabled indefinitely\" then the duration is \"infinite\". The \"reason\" is the name of the override but NO EMOJI, and the \"reasonDisplay\" is the override name with the emoji. Check out the samples Body messages for overrides below. You will have to edit your body messages to match your reason and reasonDisplay. The target range and duration of the override does not need to be specified. Body message for override named \"hormones\" {\"eventType\": \"Temporary Override\", \"reason\": \"hormones\", \"reasonDisplay\": \"\ud83e\udddf\u200d\u2640\ufe0f hormones\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message for override named \"running\" {\"eventType\": \"Temporary Override\", \"reason\": \"running\", \"reasonDisplay\": \"\ud83c\udfc3\u200d\u2640\ufe0f running\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message for override named \"Low Treatment\" {\"eventType\": \"Temporary Override\", \"reason\": \"Low Treatment\", \"reasonDisplay\": \"\ud83c\udf6c Low Treatment\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message to cancel any override {\"eventType\": \"Temporary Override Cancel\", \"secret\": \"your_hashed_api_goes_here!!!\"} Click the Create Action button on the bottom of the screen when you finish. Now is your chance to change the title of your applet now to something meaningful. You can turn on notifications, too, using the slider shown. If you turn on the notifications, you will get an alert on your phone and pebble watch when the button press has been successfully deployed. Finish the IFTTT button by clicking on the Finish button that appears. Repeat the setup for new applets for as many automated actions/overrides as you would like to setup.","title":"Step 2: Create your \"Applets\""},{"location":"nightscout/ifttt/#step-3-enable-ifttt-in-your-nightscout-site","text":"Now that we have cool applets made, we need to give Nightscout some information so that it will accept commands from our applets. It's pretty simple to do...just a couple additions to your Heroku settings. Find your Maker Key by going to your IFTTT account icon in upper right corner, choose \"My services\" and then click on the Webhooks service, settings. You will see your Maker Key as the last part of the URL after the use/ ; copy and paste that last part (the red circled part as shown) Login to your Nightscout site host (azure or heroku) and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.","title":"Step 3: Enable IFTTT in your Nightscout site"},{"location":"nightscout/ifttt/#step-4-install-ifttt-app-on-your-iphoneandroid","text":"Now that all the hard work is done, we can take easy street and just add that work to the phone via the IFTTT app. By accessing the IFTTT widget on your iPhone, you'll be able to easily and quickly access the useful buttons you've just created. Download the IFTTT app on your phone and log in using your IFTTT account. For iPhone users, if you swipe right from your iPhone's home screen, you will have the Today view showing. Scroll to the bottom, click \"edit\". This should show a list of existing widgets, followed by a list of \"more widgets\" with green + signs. Click on the IFTTT's green circle and the widget will be moved to the top, active widgets area. You can hold your finger on the three left lines of the IFTTT widget row to drag it to the top of your widget panel, if you prefer to have it as the top-most widget. If you end up with more than four IFTTT applets, they will appear in reverse-order of when they were created...which may not be the same as you'd prefer them to appear on your widget bar. If you'd like to reorder them: go into your iPhone's IFTTT app click on My Applets click on the gear icon in upper left of screen click on Widgets click on the pencil icon in upper right of screen click and hold the three lines that appear on the right side of the widget that you want to move. Drag the widget to the order in the list that you'd like it to appear in your widget quickscreen.","title":"Step 4: Install IFTTT app on your iPhone/Android"},{"location":"nightscout/ifttt/#extra-credit-alexa-integration","text":"Since you have IFTTT/Maker requests working, you can get it to work with anything that supports IFTTT, including Alexa. You will need to add \"alexa\" to your ENABLE line in your Heroku settings. And then repeat the steps above, but instead of using \"ButtonWidget\" service we started with earlier (the \"+if\" part of the setup)...you will use the \"AmazonAlexa\" service. Alexa requests do not need underscores, FYI.","title":"Extra Credit: Alexa integration"},{"location":"nightscout/insights/","text":"Nightscout components \u2301 GitHub \u2301 GitHub is a Git repository hosting service. It's a place where you can store and share projects: software, hardware, documentation (and virtually anything) and maintain versions of your work. It allows collaboration between developers (anybody can view the complete code of Nightscout: it is open source) and anybody can download it or make a copy of it (a \"fork\" ). A GitHub project is available in a repository (also called repo) like the Apollo 11 source code and Nightscout https://github.com/nightscout/cgm-remote-monitor . Heroku \u2301 Heroku is a container-based cloud Platform as a Service. It's an infrastructure where you can run your application (your program) in the cloud, meaning that you don't need to have specific hardware (servers, hardware, infrastructures) and it is available from anywhere when connected to the internet, usually as a web page with an address like https://mynightscoutsite.herokuapp.com. Your Nightscout app will run in the Heroku cloud and will be available to any device connected to the internet and knowing the address. You can also secure it and decide who can see your BG. mongoDB \u2301 mongoDB is a document database. It's a virtual place where you can store your data, in the cloud like Heroku. Nightscout will store all your data in an Atlas database: your BG, insulin sensitivity factors, correction factors, basal profiles, etc... This will allow Nightscout to create reports and much more. Nightscout install \u2301 In order to create a new Nightscout site you'll need to open an account in each of the previous providers. The GitHub account will allow you to copy (fork) the original source code in your own cgm-remote-monitor repository, which includes the install (deploy) and update scripts as well as the rest of the functions that make Nightscout. You can see it as the software code of Nightscout, a set of instructions. The Heroku account creation will require you to provide a valid credit card to certificate you are a physical person and not an automated system. Unless you deliberately choose a paid option (and there is no trap: you won't able to select one by mistake) you will not be billed anything. You can see Heroku as the engine of your Nightscout, the application itself, that's running somewhere on the internet and can be accessed from anywhere. The Atlas account will give you access to a small free database (500MB) that should be more than enough for most users. If uploading from a 600 series pump, or if using a DIY close loop system, it might be small and you'll need regular cleanup. Nightscout operation \u2301 During normal operation, your uploader (a device connected to your CGM and the internet) will send data to Nightscout, and Heroku will place them in the database. The values or predicted values might trigger some actions with other devices that are connected to Nightscout (like IFFT). You will be able to access them near real time from any device connected to the internet like a computer, mobile phone with a browser or a follower app, various gadgets connected to internet, smartwatches, ...","title":"How does it work?"},{"location":"nightscout/insights/#nightscout-components","text":"","title":"Nightscout components"},{"location":"nightscout/insights/#github","text":"GitHub is a Git repository hosting service. It's a place where you can store and share projects: software, hardware, documentation (and virtually anything) and maintain versions of your work. It allows collaboration between developers (anybody can view the complete code of Nightscout: it is open source) and anybody can download it or make a copy of it (a \"fork\" ). A GitHub project is available in a repository (also called repo) like the Apollo 11 source code and Nightscout https://github.com/nightscout/cgm-remote-monitor .","title":"GitHub"},{"location":"nightscout/insights/#heroku","text":"Heroku is a container-based cloud Platform as a Service. It's an infrastructure where you can run your application (your program) in the cloud, meaning that you don't need to have specific hardware (servers, hardware, infrastructures) and it is available from anywhere when connected to the internet, usually as a web page with an address like https://mynightscoutsite.herokuapp.com. Your Nightscout app will run in the Heroku cloud and will be available to any device connected to the internet and knowing the address. You can also secure it and decide who can see your BG.","title":"Heroku"},{"location":"nightscout/insights/#mongodb","text":"mongoDB is a document database. It's a virtual place where you can store your data, in the cloud like Heroku. Nightscout will store all your data in an Atlas database: your BG, insulin sensitivity factors, correction factors, basal profiles, etc... This will allow Nightscout to create reports and much more.","title":"mongoDB"},{"location":"nightscout/insights/#nightscout-install","text":"In order to create a new Nightscout site you'll need to open an account in each of the previous providers. The GitHub account will allow you to copy (fork) the original source code in your own cgm-remote-monitor repository, which includes the install (deploy) and update scripts as well as the rest of the functions that make Nightscout. You can see it as the software code of Nightscout, a set of instructions. The Heroku account creation will require you to provide a valid credit card to certificate you are a physical person and not an automated system. Unless you deliberately choose a paid option (and there is no trap: you won't able to select one by mistake) you will not be billed anything. You can see Heroku as the engine of your Nightscout, the application itself, that's running somewhere on the internet and can be accessed from anywhere. The Atlas account will give you access to a small free database (500MB) that should be more than enough for most users. If uploading from a 600 series pump, or if using a DIY close loop system, it might be small and you'll need regular cleanup.","title":"Nightscout install"},{"location":"nightscout/insights/#nightscout-operation","text":"During normal operation, your uploader (a device connected to your CGM and the internet) will send data to Nightscout, and Heroku will place them in the database. The values or predicted values might trigger some actions with other devices that are connected to Nightscout (like IFFT). You will be able to access them near real time from any device connected to the internet like a computer, mobile phone with a browser or a follower app, various gadgets connected to internet, smartwatches, ...","title":"Nightscout operation"},{"location":"nightscout/new_user/","text":"New Nightscout Users \u2301 Nightscout is DIY, if you don\u2019t feel confident you\u2019ll have necessary skills, give it a try, you\u2019ll find open heart people ready to help you building it in many Facebook groups. For free. Paying it forward. Here is a step-by-step guide for completing your own Nightscout site DIY style. Create your Heroku, GitHub and Atlas accounts from a computer. Do not change device/computer/browser during the creation process! Note If you have unexpected issues whilst creating your site restart with another browser. Step 1: Create a GitHub account \u2301 If you already have a GitHub account and previously forked cgm-remote-monitor Make sure you delete your current cgm-remote-monitor fork using Step 1 of this guide (ONLY STEP1!) . Click this link to create a GitHub account: https://github.com/ Enter a username (anything you want and that is accepted, not very important), email, and password. Then click Sign up for GitHub Play and solve the puzzle then click Join a free plan . Select whatever choices (not important) then click Complete setup . GitHub will send you a verification email, open your mailbox and check for it (look into spam also). On the received email, click Verify email address . A new page will open in your browser, click Skip this for now . Leave the page open as it is. Step 2: Create a Heroku account \u2301 Click this link to create an Heroku account: https://signup.heroku.com/login Enter mandatory data (*) and click CREATE FREE ACCOUNT Heroku will send a confirmation email, open your mailbox and look for it (also check spam folder). Click on the activation link Create a password an write it down. Click SET PASSWORD AND LOG IN Click CLICK HERE TO PROCEED Your Heroku page will open, click on your profile picture top right and select Account Settings Click on Billing Click Add credit card Enter a valid credit card information and click Save Details Note Unless you voluntarily select billable features, your credit card information is only used for verifications and you will not be charged anything. Worst case you\u2019ll be charged $0.00 You should now have 2 pages open: Heroku and GitHub. Leave them open. Step 3: Create an Atlas account \u2301 Open another tab at: https://www.mongodb.com/cloud/atlas and click Start Free Enter information then click Get Started Free Select Create a cluster in Shared Clusters (FREE) Leave all default values and click Create Cluster Atlas will create your default cluster, wait until completion\u2026 (can take more than 3 minutes) Click on CONNECT Click on Allow Access from Anywhere Click on Add IP Address Add a username (for example nightscout) and a password. Write down this information, you\u2019ll need it later. Then click Create Database User . Click on Choose a connection method Select Connect your application Copy the connection string: click Copy and paste it somewhere to edit it (like Notepad). Paste the string in the box below: Enter your new Atlas database password and database name in the boxes below: Password: Name: Click the Generate button: Generate The connection string will appear here var bAtlas; var sdB, sPwd; var sFinalString = \"Not defined yet\"; function Generate() { var sString = sFinalString; bAtlas=0; var sString = \"Looks good!\"; var sAtlas = document.getElementById(\"myAtlas\").value; sPwd = document.getElementById(\"myPwd\").value; sdB = document.getElementById(\"mydB\").value; var iAS = sAtlas.search(\"://\"); if(iAS!=11) { sString = \"Atlas URI should start with mongodb+srv://\"; } else { var iAP = sAtlas.search(\"<password>\"); if(iAP==-1) { sString = \"Atlas URI should contain &lt;password&gt;\"; } else { var iAD = sAtlas.search(\"<dbname>\"); if(iAD==-1) { sString = \"Atlas URI should contain &lt;dbname&gt;\"; } else { bAtlas=1; sString = sAtlas.substring(0,iAP); sFinalString = sString.concat(sPwd, sAtlas.substring(iAP+10, iAD)); sString = sAtlas.substring(iAP+10, iAD); sFinalString = sFinalString.concat(sdB, sAtlas.substring(iAD+8)); } } } if(bAtlas) document.getElementById(\"result\").innerHTML = sFinalString; else document.getElementById(\"result\").innerHTML = sString; } It should be similar to this ( xxxxx will be different): mongodb+srv://nightscout:<password>@cluster0.xxxxx.mongodb.net/<dbname>?retryWrites=true&w=majority Keep this string safely aside, it is called your MONGODB_URI If you didn't manage to get the string with the automated script: (else proceed to Step 4) Helper page Open this helper page in another tab and insert the original connection string and both your database password and the name you decided for your database name (not important), then click Generate to get the final string (leave the page open). If you want to do it manually: replace <password> with your password as noted previously (in the example below soo5ecret ) and <dbname> by any text you want, say mycgmic for example. The result will be like this: mongodb+srv://nightscout:soo5ecret@cluster0.xxxxx.mongodb.net/mycgmic?retryWrites=true&w=majority Note There are no < and > characters in the final string, neither for password and database name. Step 4: Fork and deploy cgm-remote-monitor \u2301 If you previously forked cgm-remote-monitor before reaching this step, you should delete the existing cgm-remote-monitor repository before proceeding Delete your current cgm-remote-monitor fork using Step 1 of this guide (ONLY STEP1!) . You should now have three pages opened in your browser: Heroku, Atlas and Github, make sur each one is logged in (i.e. not asking you to login) before you continue. Click this link https://github.com/nightscout/cgm-remote-monitor , a new GitHub page will open. Click on Fork Wait a moment Scroll down and click Deploy to Heroku You're getting into the core setup of your site Below you'll see the minimum required configuration, you can modify the variables later in Heroku. A more complete list here: Setup Enter your CGM in the Cloud site name: invent a name you will use to see your BG in the cloud. Check the name is available. Don\u2019t change the region. Scroll down and setup the following variables: API_SECRET will be your Nightscout site password, it needs to be at least 12 characters long and should NOT use spaces and @ or ! symbols . If you want to link your Dexcom Share account as a data source, compile the following lines: MOST COMMON ERRORS The BRIDGE_PASSWORD and BRIDGE_USER_NAME are NOT visible from within your Dexcom app or online account. The values for them are what you entered into your Dexcom mobile app when you VERY FIRST logged into that app however long ago. The BRIDGE_USER_NAME is not an email address. The most common error on initial Nightscout setups is that people incorrectly use an old account or an old password. To test your username and password, go to Dexcom's Clarity page (check here for USA accounts and here for the others ) and try logging into your Dexcom account. If your account info doesn't let you in, or you don't see data in your Clarity account...then you need to figure out your actual credentials before moving ahead. Password Some people have had problems with their bridge connecting when their Dexcom passwords are entirely numeric. If you have connection issues in that case, try changing your password to something with a mix of numbers and letters. Info You need to have at least one follower to use Dexcom Share. See here . If you want to link your CareLink account as a data source, compile the following lines: Select the units you\u2019re using in DISPLAY_UNITS acceptable choices are mg/dl or mmol/L (or just mmol ). In ENABLE copy and paste the following words (separated by a space) so that won't have to think about which you want now: careportal basal dbsize rawbg iob maker bridge cob bwp cage iage sage boluscalc pushover treatmentnotify mmconnect loop pump profile food openaps bage alexa override More on ENABLE words If you want to know more about them, look here: Setup Now you need that connection string you defined during the Atlas cluster creation (as the example below, but not the string below). Copy and paste it in the MONGODB_URI variable field. mongodb+srv://nightscout:soo5ecret@cluster0.xxxxx.mongodb.net/mycgmic?retryWrites=true&w=majority Note This is the string generated in the helper page if you decided to use it. Browse down to the end of the list and click Deploy app WAIT until completion (will take some time). Do not interfere with the process until it's complete. Then click View Your Nightscout site should open, click on the hamburger menu top right and select Profile Editor . Setup your Time zone and eventually all other fields. Do not leave empty fields. If you don't know which value you should use, just leave default. You can change them later. Browse down to Authentication status and click Authenticate . Enter your API secret. Click Update . Click Save . If the following pop-up shows up click OK , and check status (upper right of the window). Dexcom Share and CareLink users should see data flowing in after some minutes, other uploaders like xDrip+, Spike, xDrip4iOS, etc will need to be setup with the Nightscout address and API secret in the app. Finally, you might want to modify the PAPERTRAIL_API_TOKEN line. Heroku offers a free, tiny amount of Papertrail service (like a logging service for how the site is running), but really generates more confusion to most people later when they get a message that their \"Free Papertrail Service has run out of room\". Papertrail is not needed, edit the line and add DISABLED at the end, so that you can recover the function should you need it. Step 5: Uploader setup \u2301 Configure your uploader .","title":"Install"},{"location":"nightscout/new_user/#new-nightscout-users","text":"Nightscout is DIY, if you don\u2019t feel confident you\u2019ll have necessary skills, give it a try, you\u2019ll find open heart people ready to help you building it in many Facebook groups. For free. Paying it forward. Here is a step-by-step guide for completing your own Nightscout site DIY style. Create your Heroku, GitHub and Atlas accounts from a computer. Do not change device/computer/browser during the creation process! Note If you have unexpected issues whilst creating your site restart with another browser.","title":"New Nightscout Users"},{"location":"nightscout/new_user/#step-1-create-a-github-account","text":"If you already have a GitHub account and previously forked cgm-remote-monitor Make sure you delete your current cgm-remote-monitor fork using Step 1 of this guide (ONLY STEP1!) . Click this link to create a GitHub account: https://github.com/ Enter a username (anything you want and that is accepted, not very important), email, and password. Then click Sign up for GitHub Play and solve the puzzle then click Join a free plan . Select whatever choices (not important) then click Complete setup . GitHub will send you a verification email, open your mailbox and check for it (look into spam also). On the received email, click Verify email address . A new page will open in your browser, click Skip this for now . Leave the page open as it is.","title":"Step 1: Create a GitHub account"},{"location":"nightscout/new_user/#step-2-create-a-heroku-account","text":"Click this link to create an Heroku account: https://signup.heroku.com/login Enter mandatory data (*) and click CREATE FREE ACCOUNT Heroku will send a confirmation email, open your mailbox and look for it (also check spam folder). Click on the activation link Create a password an write it down. Click SET PASSWORD AND LOG IN Click CLICK HERE TO PROCEED Your Heroku page will open, click on your profile picture top right and select Account Settings Click on Billing Click Add credit card Enter a valid credit card information and click Save Details Note Unless you voluntarily select billable features, your credit card information is only used for verifications and you will not be charged anything. Worst case you\u2019ll be charged $0.00 You should now have 2 pages open: Heroku and GitHub. Leave them open.","title":"Step 2: Create a Heroku account"},{"location":"nightscout/new_user/#step-3-create-an-atlas-account","text":"Open another tab at: https://www.mongodb.com/cloud/atlas and click Start Free Enter information then click Get Started Free Select Create a cluster in Shared Clusters (FREE) Leave all default values and click Create Cluster Atlas will create your default cluster, wait until completion\u2026 (can take more than 3 minutes) Click on CONNECT Click on Allow Access from Anywhere Click on Add IP Address Add a username (for example nightscout) and a password. Write down this information, you\u2019ll need it later. Then click Create Database User . Click on Choose a connection method Select Connect your application Copy the connection string: click Copy and paste it somewhere to edit it (like Notepad). Paste the string in the box below: Enter your new Atlas database password and database name in the boxes below: Password: Name: Click the Generate button: Generate The connection string will appear here var bAtlas; var sdB, sPwd; var sFinalString = \"Not defined yet\"; function Generate() { var sString = sFinalString; bAtlas=0; var sString = \"Looks good!\"; var sAtlas = document.getElementById(\"myAtlas\").value; sPwd = document.getElementById(\"myPwd\").value; sdB = document.getElementById(\"mydB\").value; var iAS = sAtlas.search(\"://\"); if(iAS!=11) { sString = \"Atlas URI should start with mongodb+srv://\"; } else { var iAP = sAtlas.search(\"<password>\"); if(iAP==-1) { sString = \"Atlas URI should contain &lt;password&gt;\"; } else { var iAD = sAtlas.search(\"<dbname>\"); if(iAD==-1) { sString = \"Atlas URI should contain &lt;dbname&gt;\"; } else { bAtlas=1; sString = sAtlas.substring(0,iAP); sFinalString = sString.concat(sPwd, sAtlas.substring(iAP+10, iAD)); sString = sAtlas.substring(iAP+10, iAD); sFinalString = sFinalString.concat(sdB, sAtlas.substring(iAD+8)); } } } if(bAtlas) document.getElementById(\"result\").innerHTML = sFinalString; else document.getElementById(\"result\").innerHTML = sString; } It should be similar to this ( xxxxx will be different): mongodb+srv://nightscout:<password>@cluster0.xxxxx.mongodb.net/<dbname>?retryWrites=true&w=majority Keep this string safely aside, it is called your MONGODB_URI If you didn't manage to get the string with the automated script: (else proceed to Step 4) Helper page Open this helper page in another tab and insert the original connection string and both your database password and the name you decided for your database name (not important), then click Generate to get the final string (leave the page open). If you want to do it manually: replace <password> with your password as noted previously (in the example below soo5ecret ) and <dbname> by any text you want, say mycgmic for example. The result will be like this: mongodb+srv://nightscout:soo5ecret@cluster0.xxxxx.mongodb.net/mycgmic?retryWrites=true&w=majority Note There are no < and > characters in the final string, neither for password and database name.","title":"Step 3: Create an Atlas account"},{"location":"nightscout/new_user/#step-4-fork-and-deploy-cgm-remote-monitor","text":"If you previously forked cgm-remote-monitor before reaching this step, you should delete the existing cgm-remote-monitor repository before proceeding Delete your current cgm-remote-monitor fork using Step 1 of this guide (ONLY STEP1!) . You should now have three pages opened in your browser: Heroku, Atlas and Github, make sur each one is logged in (i.e. not asking you to login) before you continue. Click this link https://github.com/nightscout/cgm-remote-monitor , a new GitHub page will open. Click on Fork Wait a moment Scroll down and click Deploy to Heroku You're getting into the core setup of your site Below you'll see the minimum required configuration, you can modify the variables later in Heroku. A more complete list here: Setup Enter your CGM in the Cloud site name: invent a name you will use to see your BG in the cloud. Check the name is available. Don\u2019t change the region. Scroll down and setup the following variables: API_SECRET will be your Nightscout site password, it needs to be at least 12 characters long and should NOT use spaces and @ or ! symbols . If you want to link your Dexcom Share account as a data source, compile the following lines: MOST COMMON ERRORS The BRIDGE_PASSWORD and BRIDGE_USER_NAME are NOT visible from within your Dexcom app or online account. The values for them are what you entered into your Dexcom mobile app when you VERY FIRST logged into that app however long ago. The BRIDGE_USER_NAME is not an email address. The most common error on initial Nightscout setups is that people incorrectly use an old account or an old password. To test your username and password, go to Dexcom's Clarity page (check here for USA accounts and here for the others ) and try logging into your Dexcom account. If your account info doesn't let you in, or you don't see data in your Clarity account...then you need to figure out your actual credentials before moving ahead. Password Some people have had problems with their bridge connecting when their Dexcom passwords are entirely numeric. If you have connection issues in that case, try changing your password to something with a mix of numbers and letters. Info You need to have at least one follower to use Dexcom Share. See here . If you want to link your CareLink account as a data source, compile the following lines: Select the units you\u2019re using in DISPLAY_UNITS acceptable choices are mg/dl or mmol/L (or just mmol ). In ENABLE copy and paste the following words (separated by a space) so that won't have to think about which you want now: careportal basal dbsize rawbg iob maker bridge cob bwp cage iage sage boluscalc pushover treatmentnotify mmconnect loop pump profile food openaps bage alexa override More on ENABLE words If you want to know more about them, look here: Setup Now you need that connection string you defined during the Atlas cluster creation (as the example below, but not the string below). Copy and paste it in the MONGODB_URI variable field. mongodb+srv://nightscout:soo5ecret@cluster0.xxxxx.mongodb.net/mycgmic?retryWrites=true&w=majority Note This is the string generated in the helper page if you decided to use it. Browse down to the end of the list and click Deploy app WAIT until completion (will take some time). Do not interfere with the process until it's complete. Then click View Your Nightscout site should open, click on the hamburger menu top right and select Profile Editor . Setup your Time zone and eventually all other fields. Do not leave empty fields. If you don't know which value you should use, just leave default. You can change them later. Browse down to Authentication status and click Authenticate . Enter your API secret. Click Update . Click Save . If the following pop-up shows up click OK , and check status (upper right of the window). Dexcom Share and CareLink users should see data flowing in after some minutes, other uploaders like xDrip+, Spike, xDrip4iOS, etc will need to be setup with the Nightscout address and API secret in the app. Finally, you might want to modify the PAPERTRAIL_API_TOKEN line. Heroku offers a free, tiny amount of Papertrail service (like a logging service for how the site is running), but really generates more confusion to most people later when they get a message that their \"Free Papertrail Service has run out of room\". Papertrail is not needed, edit the line and add DISABLED at the end, so that you can recover the function should you need it.","title":"Step 4: Fork and deploy cgm-remote-monitor"},{"location":"nightscout/new_user/#step-5-uploader-setup","text":"Configure your uploader .","title":"Step 5: Uploader setup"},{"location":"nightscout/pebble/","text":"Pebble Watchface \u2301 The Pebble Watchface called SkyLoop Predict can be used with either Loop or OpenAPS systems. You will need to have a Nightscout website setup and integrated in order for the watchface to work. Simply use your Pebble app to search for the watchface and install it. In the watchface settings, enter your Nightscout URL in the Data Endpoint field, select Loop for the system, and enter iob in the T1 Name field. By entering iob , the watchface will display the iob on the watchface. In addition to the information displayed on the main watchface screen, shaking your wrist will bring up information about the pump battery and reservoir levels.","title":"Pebble"},{"location":"nightscout/pebble/#pebble-watchface","text":"The Pebble Watchface called SkyLoop Predict can be used with either Loop or OpenAPS systems. You will need to have a Nightscout website setup and integrated in order for the watchface to work. Simply use your Pebble app to search for the watchface and install it. In the watchface settings, enter your Nightscout URL in the Data Endpoint field, select Loop for the system, and enter iob in the T1 Name field. By entering iob , the watchface will display the iob on the watchface. In addition to the information displayed on the main watchface screen, shaking your wrist will bring up information about the pump battery and reservoir levels.","title":"Pebble Watchface"},{"location":"nightscout/pushover/","text":"Remote notifications \u2301 While Loop app currently sends notifications locally on Loop user's iPhone, parents and caregivers likely want those messages on their phones, too. We can achieve this functionality through a combination of Nightscout, IFTTT, Google, and Pushover. Traditionally, most people may already know of Pushover alerts through their NS site. The old Loop docs had set up for how to add your PUSHOVER_ANNOUNCEMENT_KEY , PUSHOVER_API_TOKEN , and PUSHOVER_USER_KEY in your Heroku settings to get notifications on the non-looping phones of parents and caregivers. The drawback for that method is that you could not necessarily fine-tune the alerts (maybe you wanted battery alarms on your NS website, but not get pushovers for them...a bit hard to separate out the environments that way) and Pushover had a demanding acknowledgment requirement. If you failed to acknowledge an alert, you may end up getting alarm fatigue fairly quickly as the alarm repeated itself. Using Pushover THROUGH IFTTT however, we can improve the possible notifications and who receives which ones. For example, a teenage Looper may want notifications when his/her pump site needs changing and when his/her Dexcom is about to expire in the next day. S/he already gets local notifications on his/her phone via Loop for low reservoir volumes, low pump battery, and Loop failures. Dexcom app provides high/low BG notifications locally, too. If s/he were to get those same alarms via Pushover, s/he would inevitably get alarm fatigue. A remotely-monitoring parent may want additional information, like a pushover alert when the school nurse boluses for lunch, as well as Loop failures, low iPhone battery level for the child, low pump battery, and other such information that might be useful. Perhaps there's also an emergency contact person that you only want to get high/low BG alerts...you can set that up as well quite easily. The basic concept is that NS puts out an event that triggers the IFTTT service called Webhooks (old name was \"Maker Webhooks\" hence you may see references to \"maker\" in NS docs). Actually, there are several types of events that NS has programmed in all ready to use in IFTTT. For this setup, we are going to use the most general logging event called ns-event . You'll get all the alarms and notifications logged, and then you can decide in subsequent steps which ones you'd actually like to send to your phone for pushover notification. As a brief roadmap for what we are going to do: Get necessary accounts setup Add a folder to your Google Drive Make an IFTTT applet to log NS events to your Google Spreadsheets Enable NS to work with that new IFTTT applet Make an IFTTT applet to send Pushover alert when the Google Spreadsheet is updated Get Prepped \u2301 If you don't already have these steps done, you will need them. Skip any that you already have done. Setup a Nightscout site Get an IFTTT account Get a Pushover Account Get a Google Account Download the Pushover app onto your phone, and any other phone you'd like to receive Pushover alerts Download the IFTTT app onto your phone, and any other phone you'd like to use IFTTT applets on Login to the Pushover and IFTTT apps with your login information Add a Google Drive folder \u2301 Login to your Google account and select Google Drive Click on the blue \"New\" button and create a new folder named IFTTT. Double click on the newly created IFTTT folder, select the blue \"New\" button again, and create a new subfolder called \"Nightscout-Alarms\" This IFTTT/Nightscout-Alarms folder will eventually contain numerous Google Spreadsheets, one for each NS alarm or information that is logged. As new alarms are triggered, the IFTTT applet we are about to write will add a row to the appropriate spreadsheet logging the time of the alarm and any other reported details that go with the entry. For now though, your drive will be blank...screenshot below just to give you an idea of where we are going. Make 1st IFTTT Applet to Log NS Alarms \u2301 Login to your IFTTT.com account and select the \"New Applet\" button. In the screen that appears, click on the blue \"+this\" part of the screen In the next screen, type \"webhooks\" in the search field and then click on the blue connect button If this is the first time you are using IFTTT Webhooks service, you will have a \"Connect\" button to select. If you already have IFTTT applets using Webhooks, you won't see this screen...just move to the next bullet. Click on the \"receive a web request\" blue box, and then fill in the Event Name as ns-event and then press the \"Create trigger\" button. (Side note: the event name used here corresponds to the triggers discussed above for core events that NS already has integrated for IFTTT users. If you want to, instead, use the other triggers such as ns-warn or ns-urgent, you can. This example is using the most general trigger so that the options are wider for most users.) Click on the blue \"+that\" text Enter google in the search field and click on the Google Sheets icon Select the green \"Add row to spreadsheet\" box Delete the contents of the \"Spreadsheet Name\" and \"Drive folder path\". For the \"Spreadsheet Name\", click the \"Add Ingredient\" button and select the \"Value1\". For the \"Drive folder path\", enter IFTTT/Nightscout-Alarms . You do not have to modify the \"Formatted row\" box's contents. Click the \"Create action\" button at the bottom. Turn off the toggle for receiving notifications when the applet runs, and then click the Finish button You'll now have the finished IFTTT applet that will cause a row to be added to a Google spreadsheet...tracking all your NS notifications and alarms. If it is the first time that alarm has been logged, the applet will also create the spreadsheet itself. After a while, your IFTTT/Nightscout-Alarms folder will start to look like the screenshot posted above with numerous spreadsheets for each alarm type. Enable IFTTT Webhooks in your Nightscout site \u2301 If you already have created IFTTT buttons previously to work with your NS site, you can skip this section. If those buttons are working, then you've already added your MAKER_KEY and \"maker\" to your ENABLE line in Heroku. To actually make that first applet work, we need to enter a \"Maker Key\" to get NS and IFTTT talking to each other. Find your Maker Key by going to your IFTTT account, Services and then clicking on Webhooks. (Your screen may not have as many services showing; the example account below just happens to already use several services.) You will see your Maker Key as the last part of the URL; copy that last part (the red circled part) Navigate to your Heroku account's settings tab, \"reveal config vars\" and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line. Make 2nd IFTTT Applet to send Pushover notifications \u2301 In your IFTTT account, select the \"New Applet\" button. In the screen that appears, click on the blue \"+this\" part of the screen In the next screen, type \"google\" in the search field and then click on the \"Google Sheets\" logo. Click on the \"New row added to spreadsheet\" as the trigger. Enter the following information: Folder path is IFTTT/Nightscout-Alarms and for the filename you are going to enter the name of the particular NS alarm or information that you would like to get pushover alerts for. Click on the \"Create trigger\" button to save the trigger. This applet can't be created unless your filename (alarm spreadsheet) already exists. If your 1st applet we created above hasn't run for a long time, the spreadsheets may not exist yet because the alarms haven't triggered. You have two options...(1) manually create the file in your Google Drive so that you can finish the applet now or (2) wait several days/weeks for the alarms to happen and that will automatically create the files in your Google drive. If you choose option 1, here's a partial list of some of the filenames you could create in advance: Loop isn't looping Cannula age 48 hours Cannula age 72 hours Meal Bolus Warning, Pump Reservoir Low Warning Uploader Battery is Low Temporary Override Depending on your alert levels you specified in NS, some of the hours in the titles may vary to match your settings Click on the blue \"+that\" text Enter pushover in the search field and click on the Pushover icon. If this is your first time linking your IFTTT to Pushover, you will be prompted to enter your Pushover account login and allow IFTTT access. This only needs to be done once. Select the \"Send a Pushover notification\" box Delete the contents of the \"Title\" and \"Message\" and \"URL\" boxes. For the Title, click the \"Add Ingredient\" button and add ColumnC . For the \"Message\", click the \"Add Ingredient\" button and add the values of various columns from your spreadsheet for the information you would like to include. For the alerts: ColumnC contains the alarm name, ColumnA is the date/time of the alarm, and ColumnD has more detailed information about the info/alarm. This is a pretty decent recipe to follow to get the useful information in your notification. Select the \"Message Priority\" that you would like for this particular alarm type. Select the \"Device\" that you would like to receive this particular alarm type. The devices listed will be all your devices that have Pushover app installed and logged into. Click \"Create Action\" when you are finished. You'll now have made the IFTTT applet that will cause a Pushover notification to a particular device for a particular NS alarm, once the first applet records the alarm in the google spreadsheet. Keep the \"receive notification when this Applet runs\" toggled off and click the Finish button. Revisit Nightscout Alert Levels \u2301 Putting all these notifications together may cause you to want to revisit the alert levels you have set in your Heroku settings. Here's a short summary of NS for the looping-related alerts (Note: the last row, Upbat, is the Looping iPhone battery level for Loop users; or the rig's battery level for OpenAPS users.) If you'd like some of these alarms for your site and don't currently have them activated (they are all off by default unless specifically turned on), the lines you'd need to add are in the last column. If you like the default values of the WARN and/or URGENT, you don't have to add those extra lines...just the line to enable the alerts will be sufficient. SETTING DEFAULT WARN DEFAULT URGENT HEROKU SETTINGS CAGE 48 72 CAGE_ENABLE_ALERTS = true CAGE_WARN=XX CAGE_URGENT=XX SAGE 164 168 SAGE_ENABLE_ALERTS = true SAGE_WARN=XX SAGE_URGENT=XX IAGE 48 72 IAGE_ENABLE_ALERTS = true IAGE_WARN=XX IAGE_URGENT=XX LOOP 30 60 LOOP_ENABLE_ALERTS = true LOOP_WARN=XX LOOP_URGENT=XX OPENAPS 30 60 OPENAPS_ENABLE_ALERTS = true OPENAPS_WARN=XX OPENAPS_URGENT=XX PUMP_CLOCK 30 60 PUMP_ENABLE_ALERTS = true PUMP_WARN_CLOCK=XX PUMP_URGENT_CLOCK=XX PUMP_RES 10 5 PUMP_ENABLE_ALERTS = true PUMP_WARN_RES=XX PUMP_URGENT_RES=XX PUMP_BATT_P 30 20 PUMP_ENABLE_ALERTS = true PUMP_WARN_BATT_P=XX PUMP_URGENT_BATT_P=XX PUMP_BATT_V 1.35 1.30 PUMP_ENABLE_ALERTS = true PUMP_WARN_BATT_V=XX PUMP_URGENT_BATT_V=XX UPBAT 30 20 UPBAT_ENABLE_ALERTS = true UPBAT_WARN=XX UPBAT_URGENT=XX Final notes \u2301 You can use other notification services than Pushover in the last part of the second applet. For example, you could use the SMS service to send text notifications to your iPhone instead of Pushover. The downside for that is that the SMS service is limited to 100 message each month...some users may exceed that pretty easily. Another alternative notification would be IFTTT's own Notification service. This would work well, but does not have the ability to distinguish between devices the way Pushover allows. If you use IFTTT's Notifications service, every phone using your IFTTT account will get the notices. To be clear, you do NOT need to have pushover on your ENABLE line nor have PUSHOVER_USER_KEY , PUSHOVER_API_TOKEN , or PUSHOVER_ANNOUNCEMENT_KEY entered into your Heroku settings in order for any of the above to work. This is not the same Pushover as NS has integrated into its code. This is actually through IFTTT services, you just need a Pushover account to link to during the 2nd applet setup. To create more notifications, simply repeat the steps for the 2nd applet you created, only this time use a new filename that corresponds to the spreadsheet tracking the alert you'd like notifications for. You'll end up with multiple applets of the dark blue type (the pushover notifiers) and only a single light blue (NS alarm general collector). Here are examples of the Meal Bolus and Temp Basal ns-event logging spreadsheets The 1st applet can only create up to 2000 active rows in a given spreadsheet. After that, the applet will automatically create a new spreadsheet. For most alarms, it may take quite some time to reach 2000 rows of info. For other alerts, such as temp basals being set, that may fill up rather fast for the average looper. You can either clean out the data rows periodically to make room, or update your filename in the 2nd applet periodically when a new spreadsheet is made.","title":"Remote Notifications"},{"location":"nightscout/pushover/#remote-notifications","text":"While Loop app currently sends notifications locally on Loop user's iPhone, parents and caregivers likely want those messages on their phones, too. We can achieve this functionality through a combination of Nightscout, IFTTT, Google, and Pushover. Traditionally, most people may already know of Pushover alerts through their NS site. The old Loop docs had set up for how to add your PUSHOVER_ANNOUNCEMENT_KEY , PUSHOVER_API_TOKEN , and PUSHOVER_USER_KEY in your Heroku settings to get notifications on the non-looping phones of parents and caregivers. The drawback for that method is that you could not necessarily fine-tune the alerts (maybe you wanted battery alarms on your NS website, but not get pushovers for them...a bit hard to separate out the environments that way) and Pushover had a demanding acknowledgment requirement. If you failed to acknowledge an alert, you may end up getting alarm fatigue fairly quickly as the alarm repeated itself. Using Pushover THROUGH IFTTT however, we can improve the possible notifications and who receives which ones. For example, a teenage Looper may want notifications when his/her pump site needs changing and when his/her Dexcom is about to expire in the next day. S/he already gets local notifications on his/her phone via Loop for low reservoir volumes, low pump battery, and Loop failures. Dexcom app provides high/low BG notifications locally, too. If s/he were to get those same alarms via Pushover, s/he would inevitably get alarm fatigue. A remotely-monitoring parent may want additional information, like a pushover alert when the school nurse boluses for lunch, as well as Loop failures, low iPhone battery level for the child, low pump battery, and other such information that might be useful. Perhaps there's also an emergency contact person that you only want to get high/low BG alerts...you can set that up as well quite easily. The basic concept is that NS puts out an event that triggers the IFTTT service called Webhooks (old name was \"Maker Webhooks\" hence you may see references to \"maker\" in NS docs). Actually, there are several types of events that NS has programmed in all ready to use in IFTTT. For this setup, we are going to use the most general logging event called ns-event . You'll get all the alarms and notifications logged, and then you can decide in subsequent steps which ones you'd actually like to send to your phone for pushover notification. As a brief roadmap for what we are going to do: Get necessary accounts setup Add a folder to your Google Drive Make an IFTTT applet to log NS events to your Google Spreadsheets Enable NS to work with that new IFTTT applet Make an IFTTT applet to send Pushover alert when the Google Spreadsheet is updated","title":"Remote notifications"},{"location":"nightscout/pushover/#get-prepped","text":"If you don't already have these steps done, you will need them. Skip any that you already have done. Setup a Nightscout site Get an IFTTT account Get a Pushover Account Get a Google Account Download the Pushover app onto your phone, and any other phone you'd like to receive Pushover alerts Download the IFTTT app onto your phone, and any other phone you'd like to use IFTTT applets on Login to the Pushover and IFTTT apps with your login information","title":"Get Prepped"},{"location":"nightscout/pushover/#add-a-google-drive-folder","text":"Login to your Google account and select Google Drive Click on the blue \"New\" button and create a new folder named IFTTT. Double click on the newly created IFTTT folder, select the blue \"New\" button again, and create a new subfolder called \"Nightscout-Alarms\" This IFTTT/Nightscout-Alarms folder will eventually contain numerous Google Spreadsheets, one for each NS alarm or information that is logged. As new alarms are triggered, the IFTTT applet we are about to write will add a row to the appropriate spreadsheet logging the time of the alarm and any other reported details that go with the entry. For now though, your drive will be blank...screenshot below just to give you an idea of where we are going.","title":"Add a Google Drive folder"},{"location":"nightscout/pushover/#make-1st-ifttt-applet-to-log-ns-alarms","text":"Login to your IFTTT.com account and select the \"New Applet\" button. In the screen that appears, click on the blue \"+this\" part of the screen In the next screen, type \"webhooks\" in the search field and then click on the blue connect button If this is the first time you are using IFTTT Webhooks service, you will have a \"Connect\" button to select. If you already have IFTTT applets using Webhooks, you won't see this screen...just move to the next bullet. Click on the \"receive a web request\" blue box, and then fill in the Event Name as ns-event and then press the \"Create trigger\" button. (Side note: the event name used here corresponds to the triggers discussed above for core events that NS already has integrated for IFTTT users. If you want to, instead, use the other triggers such as ns-warn or ns-urgent, you can. This example is using the most general trigger so that the options are wider for most users.) Click on the blue \"+that\" text Enter google in the search field and click on the Google Sheets icon Select the green \"Add row to spreadsheet\" box Delete the contents of the \"Spreadsheet Name\" and \"Drive folder path\". For the \"Spreadsheet Name\", click the \"Add Ingredient\" button and select the \"Value1\". For the \"Drive folder path\", enter IFTTT/Nightscout-Alarms . You do not have to modify the \"Formatted row\" box's contents. Click the \"Create action\" button at the bottom. Turn off the toggle for receiving notifications when the applet runs, and then click the Finish button You'll now have the finished IFTTT applet that will cause a row to be added to a Google spreadsheet...tracking all your NS notifications and alarms. If it is the first time that alarm has been logged, the applet will also create the spreadsheet itself. After a while, your IFTTT/Nightscout-Alarms folder will start to look like the screenshot posted above with numerous spreadsheets for each alarm type.","title":"Make 1st IFTTT Applet to Log NS Alarms"},{"location":"nightscout/pushover/#enable-ifttt-webhooks-in-your-nightscout-site","text":"If you already have created IFTTT buttons previously to work with your NS site, you can skip this section. If those buttons are working, then you've already added your MAKER_KEY and \"maker\" to your ENABLE line in Heroku. To actually make that first applet work, we need to enter a \"Maker Key\" to get NS and IFTTT talking to each other. Find your Maker Key by going to your IFTTT account, Services and then clicking on Webhooks. (Your screen may not have as many services showing; the example account below just happens to already use several services.) You will see your Maker Key as the last part of the URL; copy that last part (the red circled part) Navigate to your Heroku account's settings tab, \"reveal config vars\" and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.","title":"Enable IFTTT Webhooks in your Nightscout site"},{"location":"nightscout/pushover/#make-2nd-ifttt-applet-to-send-pushover-notifications","text":"In your IFTTT account, select the \"New Applet\" button. In the screen that appears, click on the blue \"+this\" part of the screen In the next screen, type \"google\" in the search field and then click on the \"Google Sheets\" logo. Click on the \"New row added to spreadsheet\" as the trigger. Enter the following information: Folder path is IFTTT/Nightscout-Alarms and for the filename you are going to enter the name of the particular NS alarm or information that you would like to get pushover alerts for. Click on the \"Create trigger\" button to save the trigger. This applet can't be created unless your filename (alarm spreadsheet) already exists. If your 1st applet we created above hasn't run for a long time, the spreadsheets may not exist yet because the alarms haven't triggered. You have two options...(1) manually create the file in your Google Drive so that you can finish the applet now or (2) wait several days/weeks for the alarms to happen and that will automatically create the files in your Google drive. If you choose option 1, here's a partial list of some of the filenames you could create in advance: Loop isn't looping Cannula age 48 hours Cannula age 72 hours Meal Bolus Warning, Pump Reservoir Low Warning Uploader Battery is Low Temporary Override Depending on your alert levels you specified in NS, some of the hours in the titles may vary to match your settings Click on the blue \"+that\" text Enter pushover in the search field and click on the Pushover icon. If this is your first time linking your IFTTT to Pushover, you will be prompted to enter your Pushover account login and allow IFTTT access. This only needs to be done once. Select the \"Send a Pushover notification\" box Delete the contents of the \"Title\" and \"Message\" and \"URL\" boxes. For the Title, click the \"Add Ingredient\" button and add ColumnC . For the \"Message\", click the \"Add Ingredient\" button and add the values of various columns from your spreadsheet for the information you would like to include. For the alerts: ColumnC contains the alarm name, ColumnA is the date/time of the alarm, and ColumnD has more detailed information about the info/alarm. This is a pretty decent recipe to follow to get the useful information in your notification. Select the \"Message Priority\" that you would like for this particular alarm type. Select the \"Device\" that you would like to receive this particular alarm type. The devices listed will be all your devices that have Pushover app installed and logged into. Click \"Create Action\" when you are finished. You'll now have made the IFTTT applet that will cause a Pushover notification to a particular device for a particular NS alarm, once the first applet records the alarm in the google spreadsheet. Keep the \"receive notification when this Applet runs\" toggled off and click the Finish button.","title":"Make 2nd IFTTT Applet to send Pushover notifications"},{"location":"nightscout/pushover/#revisit-nightscout-alert-levels","text":"Putting all these notifications together may cause you to want to revisit the alert levels you have set in your Heroku settings. Here's a short summary of NS for the looping-related alerts (Note: the last row, Upbat, is the Looping iPhone battery level for Loop users; or the rig's battery level for OpenAPS users.) If you'd like some of these alarms for your site and don't currently have them activated (they are all off by default unless specifically turned on), the lines you'd need to add are in the last column. If you like the default values of the WARN and/or URGENT, you don't have to add those extra lines...just the line to enable the alerts will be sufficient. SETTING DEFAULT WARN DEFAULT URGENT HEROKU SETTINGS CAGE 48 72 CAGE_ENABLE_ALERTS = true CAGE_WARN=XX CAGE_URGENT=XX SAGE 164 168 SAGE_ENABLE_ALERTS = true SAGE_WARN=XX SAGE_URGENT=XX IAGE 48 72 IAGE_ENABLE_ALERTS = true IAGE_WARN=XX IAGE_URGENT=XX LOOP 30 60 LOOP_ENABLE_ALERTS = true LOOP_WARN=XX LOOP_URGENT=XX OPENAPS 30 60 OPENAPS_ENABLE_ALERTS = true OPENAPS_WARN=XX OPENAPS_URGENT=XX PUMP_CLOCK 30 60 PUMP_ENABLE_ALERTS = true PUMP_WARN_CLOCK=XX PUMP_URGENT_CLOCK=XX PUMP_RES 10 5 PUMP_ENABLE_ALERTS = true PUMP_WARN_RES=XX PUMP_URGENT_RES=XX PUMP_BATT_P 30 20 PUMP_ENABLE_ALERTS = true PUMP_WARN_BATT_P=XX PUMP_URGENT_BATT_P=XX PUMP_BATT_V 1.35 1.30 PUMP_ENABLE_ALERTS = true PUMP_WARN_BATT_V=XX PUMP_URGENT_BATT_V=XX UPBAT 30 20 UPBAT_ENABLE_ALERTS = true UPBAT_WARN=XX UPBAT_URGENT=XX","title":"Revisit Nightscout Alert Levels"},{"location":"nightscout/pushover/#final-notes","text":"You can use other notification services than Pushover in the last part of the second applet. For example, you could use the SMS service to send text notifications to your iPhone instead of Pushover. The downside for that is that the SMS service is limited to 100 message each month...some users may exceed that pretty easily. Another alternative notification would be IFTTT's own Notification service. This would work well, but does not have the ability to distinguish between devices the way Pushover allows. If you use IFTTT's Notifications service, every phone using your IFTTT account will get the notices. To be clear, you do NOT need to have pushover on your ENABLE line nor have PUSHOVER_USER_KEY , PUSHOVER_API_TOKEN , or PUSHOVER_ANNOUNCEMENT_KEY entered into your Heroku settings in order for any of the above to work. This is not the same Pushover as NS has integrated into its code. This is actually through IFTTT services, you just need a Pushover account to link to during the 2nd applet setup. To create more notifications, simply repeat the steps for the 2nd applet you created, only this time use a new filename that corresponds to the spreadsheet tracking the alert you'd like notifications for. You'll end up with multiple applets of the dark blue type (the pushover notifiers) and only a single light blue (NS alarm general collector). Here are examples of the Meal Bolus and Temp Basal ns-event logging spreadsheets The 1st applet can only create up to 2000 active rows in a given spreadsheet. After that, the applet will automatically create a new spreadsheet. For most alarms, it may take quite some time to reach 2000 rows of info. For other alerts, such as temp basals being set, that may fill up rather fast for the average looper. You can either clean out the data rows periodically to make room, or update your filename in the 2nd applet periodically when a new spreadsheet is made.","title":"Final notes"},{"location":"nightscout/reports/","text":"Reports \u2301 Nightscout offers some fantastic data-crunching report tools in the settings area (the upper right corner, three horizontal lines). You can play around with various date ranges, target ranges, and provide reports to your endocrinologist to review.","title":"Reports"},{"location":"nightscout/reports/#reports","text":"Nightscout offers some fantastic data-crunching report tools in the settings area (the upper right corner, three horizontal lines). You can play around with various date ranges, target ranges, and provide reports to your endocrinologist to review.","title":"Reports"},{"location":"nightscout/setup_variables/","text":"Nightscout Configuration \u2301 A complete list and description is available here: https://github.com/nightscout/cgm-remote-monitor#environment Editing Config Vars in Heroku \u2301 Once Nightscout deployed, you can access your variables from Heroku . Select your app Click Settings Scroll down and click Reveal Config Vars You can modify the values clicking on the pen icon Change the contents of Value as needed then click Save Changes Nightscout core Config Vars \u2301 When deploying Nightscout for the first time you are required to setup core config variables that are mandatory to the site functioning. You will see them in the same order they appear when setting up a new site. If you need to modify them later, you'll find them in Heroku . From Settings , click on the Reveal Config Vars Alarms \u2301 ALARMS You can setup alarms, so that when your Nightscout page is open and the alarm enabled, above (HIGH) or below (LOW) a certain threshold, a sound might play. ALARM_HIGH Default setting for new browser views, for the High alarm (triggered when BG crosses BG_TARGET_TOP). ('on' or 'off') on ALARM_LOW Default setting for new browser views, for the Low alarm (triggered when BG crosses BG_TARGET_BOTTOM). ('on' or 'off') on TIMEAGO Missing data alarms can also be setup, so that when your Nightscout page is open and the alarm enabled, after a certain time without receiveing BG, a sound might play. ALARM_TIMEAGO_URGENT Default setting for new browser views, for an urgent alarm when CGM data hasn't been received in the number of minutes set in ALARM_TIMEAGO_URGENT_MINS. ('on' or 'off') on ALARM_TIMEAGO_URGENT_MINS Default setting for new browser views, for the number of minutes since the last CGM reading to trigger an ALARM_TIMEAGO_URGENT alarm. 30 ALARM_TIMEAGO_WARN Default setting for new browser views, for a warning alarm when CGM data hasn't been received in the number of minutes set in ALARM_TIMEAGO_WARN_MINS. ('on' or 'off') on ALARM_TIMEAGO_WARN_MINS Default setting for new browser views, for the number of minutes since the last CGM reading to trigger an ALARM_TIMEAGO_WARN alarm. 15 TYPES Keep the simple type so that the BG_ parameters (setup below) will be used. ALARM_TYPES 'simple' and/or 'predict'. Simple alarms trigger when BG crosses the various thresholds set below. Predict alarms use a formula that forecasts where the BG is going based on its trend. You will not get warnings when crossing the BG thresholds set below when using the predict type. simple ALARM_URGENT_HIGH Default setting for new browser views, for the Urgent High alarm (triggered when BG crosses BG_HIGH). ('on' or 'off') on ALARM_URGENT_LOW Default setting for new browser views, for the Urgent Low alarm (triggered when BG crosses BG_LOW). ('on' or 'off') on API Secret This is the passcode that will be required by the uploader app (if any) to send data to your site, and that will allow you to modify your site parameters from the web interface. Keep it secret, only share it with trusted people, change it if you believe it's been exposed publicly. Minimum length is 12 characters, don't make it too long and do not put special characters in it (better stick to letters and numbers). It is case sensitive. API_SECRET Required A passphrase that must be at least 12 characters long. Avoid 'special' characters, which can cause problems in some cases. MyV3ry53cr37 BG Thresholds These values are the ones that will trigger the alarms defined above. They are expressed in the unit you will select below with DISPLAY_UNITS . BG_HIGH Urgent High BG threshold, triggers the ALARM_URGENT_HIGH alarm. Set in mg/dL or mmol/L, as set in DISPLAY_UNITS variable. BG_LOW Urgent Low BG threshold, triggers the ALARM_URGENT_LOW alarm. Set in mg/dL or mmol/L, as set in DISPLAY_UNITS variable. BG_TARGET_BOTTOM Low BG threshold, triggers the ALARM_LOW alarm. Set in mg/dL or mmol/L, as set in DISPLAY_UNITS variable. BG_TARGET_TOP High BG threshold, triggers the ALARM_HIGH alarm. Set in mg/dL or mmol/L, as set in DISPLAY_UNITS variable. Dexcom Bridge Entering a BRIDGE_PASSWORD and BRIDGE_USER_NAME will allow you to receive your BG directly from Dexcom Share if you have a Dexcom sensor connected to a device that uploads it to the internet. This is possible with the Dexcom G5 and G6 apps on a mobile phone. For Dexcom G4 you need the original Nightscout project uploader with the receiver. Username and Password To test your username and password, go to Dexcom's Clarity page (check here for USA accounts and here for the others ) and try logging into your Dexcom account. Some people have had problems with their bridge connecting when their Dexcom passwords are entirely numeric. If you have connection issues in that case, try changing your password to something with a mix of numbers and letters. BRIDGE_PASSWORD Your Dexcom account password, to receive CGM data from the Dexcom Share service. Also make sure to include 'bridge' in your ENABLE line. Make sure you select the right country code! BRIDGE_SERVER If you are bridging from the Dexcom Share service, and are anywhere outside the US, change this to EU. ('US' or 'EU') US EU BRIDGE_USER_NAME Your Dexcom account username, to receive CGM data from the Dexcom Share service. Also make sure to include 'bridge' in your ENABLE line. More variables for BRIDGE are available here for you to add and edit in Heroku . CUSTOM_TITLE This will change your Nightscout displayed name (top left) from default. The display name for the Nightscout site. Appears in the upper left of the main view. Often set to the name of the CGM wearer. DISPLAY_UNITS Required Preferred BG units for the site: 'mg/dl' or 'mmol/L' (or just 'mmol'). mg/dl mmol ENABLE Select the right plugins! Better too many than not enough. Plugins to enable for your site. Must be a space-delimited, lower-case list. careportal basal dbsize Include the word 'bridge' here if you are receiving data from the Dexcom Share service. careportal basal dbsize bridge Include 'mmconnect' if you are bridging from the MiniMed CareLink service. careportal basal dbsize mmconnect If you don't want to decide, add all the followings, you can disable them if you don't need them: careportal basal dbsize rawbg iob maker bridge cob bwp cage iage sage boluscalc pushover treatmentnotify mmconnect loop pump profile food openaps bage alexa override CareLink MMConnect Entering a MMCONNECT_PASSWORD and MMCONNECT_USER_NAME will allow you to receive your BG directly from CareLink if you have a Medtronic sensor connected to a device that uploads it to the internet. Connecting Nightscout to a Medtronic pump requires an uploader system as detailed here . MMCONNECT_PASSWORD Your CareLink account password, to receive CGM data from the CareLink service. Also make sure to include 'mmconnect' in your ENABLE line. Make sure you select the right country code! MMCONNECT_SERVER If you are bridging from the CareLink service, and are anywhere outside the US, change this to EU. ('US' or 'EU') US EU MMCONNECT_USER_NAME Your CareLink account username, to receive CGM data from the CareLink service. Also make sure to include 'mmconnect' in your ENABLE line. More variables for MMCONNECT are available here for you to add and edit in Heroku . MONGO_COLLECTION Required The Mongo collection where CGM data is stored. This string is vital to your Nightscout functioning: it is the link that will allow access to the database where all your data is stored in the cloud. A wrong connection string will prevent your site to open and your data to upload in Nightscout An Atlas database string will look like this: mongodb+srv://nightscout:<password>@cluster0.xxxxx.mongodb.net/<dbname>?retryWrites=true&w=majority NIGHT_MODE Default setting for new browser views, for whether Night Mode should be enabled. ('on' or 'off') off SHOW_PLUGINS Default setting for whether or not these plugins are checked (active) by default, not merely enabled. Include plugins here as in the ENABLE line; space-separated and lower-case. SHOW_RAWBG Default setting for new browser views, for the display of raw CGM data (if available). ('always', 'never', or 'noise') THEME Default setting for new browser views, for the color theme of the CGM graph. ('default', 'colors', or 'colorblindfriendly') Default Colors Colorblind-friendly colors TIME_FORMAT Default setting for new browser views, for the time mode. ('12' or '24') 12 24 Default Plugins \u2301 Plugins are used to extend the way information is displayed, how notifications are sent, alarms are triggered, and more. If you want the ENABLE 'd plugins to show by default on any browser, you should put them in the SHOW_PLUGINS variable. If you want to specifically disable a plugin (mainly a default plugin) you should place it in the DISABLE variable. You also can enable them manually on your Nightscout view from the hamburger menu. Authenticate and Save the settings on your browser. Below some default plugins: timeago , upbat , direction and delta . AR2 forecasting can be enabled/disabled from ... more about it here . Simple alarms are enabled by default if one of the BG_HIGH , BG_TARGET_TOP , BG_TARGET_BOTTOM , BG_LOW thresholds is set or ALARM_TYPES includes simple . You'll find the plugin in the hamburger menu. You can change thresholds in Profile editor . You can click the loudspeaker icon to test the alarms volume or to snooze an active alarm. Profile editor is available from the hamburger menu with the default variable profile . Database size allows you to monitor your free tier database size with the variable dbsize . The indication will not be accurate for other sizes than 512MiB unless you set it up correctly. See here . Advanced Plugins \u2301 Care Portal plugin is an important plugin that gives access to the Log a treatment interface. Unlock it entering your API secret with the lock icon top right, then use the + icon to log a treatment. The variable required to enable it is careportal . Bolus Wizard plugin gives access to the Bolus Wizard interface. You can access it with the calculator icon top right. The variable required to enable it is boluscalc .","title":"Configure your Nightscout"},{"location":"nightscout/setup_variables/#nightscout-configuration","text":"A complete list and description is available here: https://github.com/nightscout/cgm-remote-monitor#environment","title":"Nightscout Configuration"},{"location":"nightscout/setup_variables/#editing-config-vars-in-heroku","text":"Once Nightscout deployed, you can access your variables from Heroku . Select your app Click Settings Scroll down and click Reveal Config Vars You can modify the values clicking on the pen icon Change the contents of Value as needed then click Save Changes","title":"Editing Config Vars in Heroku"},{"location":"nightscout/setup_variables/#nightscout-core-config-vars","text":"When deploying Nightscout for the first time you are required to setup core config variables that are mandatory to the site functioning. You will see them in the same order they appear when setting up a new site. If you need to modify them later, you'll find them in Heroku . From Settings , click on the Reveal Config Vars","title":"Nightscout core Config Vars"},{"location":"nightscout/setup_variables/#alarms","text":"ALARMS You can setup alarms, so that when your Nightscout page is open and the alarm enabled, above (HIGH) or below (LOW) a certain threshold, a sound might play. ALARM_HIGH Default setting for new browser views, for the High alarm (triggered when BG crosses BG_TARGET_TOP). ('on' or 'off') on ALARM_LOW Default setting for new browser views, for the Low alarm (triggered when BG crosses BG_TARGET_BOTTOM). ('on' or 'off') on TIMEAGO Missing data alarms can also be setup, so that when your Nightscout page is open and the alarm enabled, after a certain time without receiveing BG, a sound might play. ALARM_TIMEAGO_URGENT Default setting for new browser views, for an urgent alarm when CGM data hasn't been received in the number of minutes set in ALARM_TIMEAGO_URGENT_MINS. ('on' or 'off') on ALARM_TIMEAGO_URGENT_MINS Default setting for new browser views, for the number of minutes since the last CGM reading to trigger an ALARM_TIMEAGO_URGENT alarm. 30 ALARM_TIMEAGO_WARN Default setting for new browser views, for a warning alarm when CGM data hasn't been received in the number of minutes set in ALARM_TIMEAGO_WARN_MINS. ('on' or 'off') on ALARM_TIMEAGO_WARN_MINS Default setting for new browser views, for the number of minutes since the last CGM reading to trigger an ALARM_TIMEAGO_WARN alarm. 15 TYPES Keep the simple type so that the BG_ parameters (setup below) will be used. ALARM_TYPES 'simple' and/or 'predict'. Simple alarms trigger when BG crosses the various thresholds set below. Predict alarms use a formula that forecasts where the BG is going based on its trend. You will not get warnings when crossing the BG thresholds set below when using the predict type. simple ALARM_URGENT_HIGH Default setting for new browser views, for the Urgent High alarm (triggered when BG crosses BG_HIGH). ('on' or 'off') on ALARM_URGENT_LOW Default setting for new browser views, for the Urgent Low alarm (triggered when BG crosses BG_LOW). ('on' or 'off') on API Secret This is the passcode that will be required by the uploader app (if any) to send data to your site, and that will allow you to modify your site parameters from the web interface. Keep it secret, only share it with trusted people, change it if you believe it's been exposed publicly. Minimum length is 12 characters, don't make it too long and do not put special characters in it (better stick to letters and numbers). It is case sensitive. API_SECRET Required A passphrase that must be at least 12 characters long. Avoid 'special' characters, which can cause problems in some cases. MyV3ry53cr37 BG Thresholds These values are the ones that will trigger the alarms defined above. They are expressed in the unit you will select below with DISPLAY_UNITS . BG_HIGH Urgent High BG threshold, triggers the ALARM_URGENT_HIGH alarm. Set in mg/dL or mmol/L, as set in DISPLAY_UNITS variable. BG_LOW Urgent Low BG threshold, triggers the ALARM_URGENT_LOW alarm. Set in mg/dL or mmol/L, as set in DISPLAY_UNITS variable. BG_TARGET_BOTTOM Low BG threshold, triggers the ALARM_LOW alarm. Set in mg/dL or mmol/L, as set in DISPLAY_UNITS variable. BG_TARGET_TOP High BG threshold, triggers the ALARM_HIGH alarm. Set in mg/dL or mmol/L, as set in DISPLAY_UNITS variable. Dexcom Bridge Entering a BRIDGE_PASSWORD and BRIDGE_USER_NAME will allow you to receive your BG directly from Dexcom Share if you have a Dexcom sensor connected to a device that uploads it to the internet. This is possible with the Dexcom G5 and G6 apps on a mobile phone. For Dexcom G4 you need the original Nightscout project uploader with the receiver. Username and Password To test your username and password, go to Dexcom's Clarity page (check here for USA accounts and here for the others ) and try logging into your Dexcom account. Some people have had problems with their bridge connecting when their Dexcom passwords are entirely numeric. If you have connection issues in that case, try changing your password to something with a mix of numbers and letters. BRIDGE_PASSWORD Your Dexcom account password, to receive CGM data from the Dexcom Share service. Also make sure to include 'bridge' in your ENABLE line. Make sure you select the right country code! BRIDGE_SERVER If you are bridging from the Dexcom Share service, and are anywhere outside the US, change this to EU. ('US' or 'EU') US EU BRIDGE_USER_NAME Your Dexcom account username, to receive CGM data from the Dexcom Share service. Also make sure to include 'bridge' in your ENABLE line. More variables for BRIDGE are available here for you to add and edit in Heroku . CUSTOM_TITLE This will change your Nightscout displayed name (top left) from default. The display name for the Nightscout site. Appears in the upper left of the main view. Often set to the name of the CGM wearer. DISPLAY_UNITS Required Preferred BG units for the site: 'mg/dl' or 'mmol/L' (or just 'mmol'). mg/dl mmol ENABLE Select the right plugins! Better too many than not enough. Plugins to enable for your site. Must be a space-delimited, lower-case list. careportal basal dbsize Include the word 'bridge' here if you are receiving data from the Dexcom Share service. careportal basal dbsize bridge Include 'mmconnect' if you are bridging from the MiniMed CareLink service. careportal basal dbsize mmconnect If you don't want to decide, add all the followings, you can disable them if you don't need them: careportal basal dbsize rawbg iob maker bridge cob bwp cage iage sage boluscalc pushover treatmentnotify mmconnect loop pump profile food openaps bage alexa override CareLink MMConnect Entering a MMCONNECT_PASSWORD and MMCONNECT_USER_NAME will allow you to receive your BG directly from CareLink if you have a Medtronic sensor connected to a device that uploads it to the internet. Connecting Nightscout to a Medtronic pump requires an uploader system as detailed here . MMCONNECT_PASSWORD Your CareLink account password, to receive CGM data from the CareLink service. Also make sure to include 'mmconnect' in your ENABLE line. Make sure you select the right country code! MMCONNECT_SERVER If you are bridging from the CareLink service, and are anywhere outside the US, change this to EU. ('US' or 'EU') US EU MMCONNECT_USER_NAME Your CareLink account username, to receive CGM data from the CareLink service. Also make sure to include 'mmconnect' in your ENABLE line. More variables for MMCONNECT are available here for you to add and edit in Heroku . MONGO_COLLECTION Required The Mongo collection where CGM data is stored. This string is vital to your Nightscout functioning: it is the link that will allow access to the database where all your data is stored in the cloud. A wrong connection string will prevent your site to open and your data to upload in Nightscout An Atlas database string will look like this: mongodb+srv://nightscout:<password>@cluster0.xxxxx.mongodb.net/<dbname>?retryWrites=true&w=majority NIGHT_MODE Default setting for new browser views, for whether Night Mode should be enabled. ('on' or 'off') off SHOW_PLUGINS Default setting for whether or not these plugins are checked (active) by default, not merely enabled. Include plugins here as in the ENABLE line; space-separated and lower-case. SHOW_RAWBG Default setting for new browser views, for the display of raw CGM data (if available). ('always', 'never', or 'noise') THEME Default setting for new browser views, for the color theme of the CGM graph. ('default', 'colors', or 'colorblindfriendly') Default Colors Colorblind-friendly colors TIME_FORMAT Default setting for new browser views, for the time mode. ('12' or '24') 12 24","title":"Alarms"},{"location":"nightscout/setup_variables/#default-plugins","text":"Plugins are used to extend the way information is displayed, how notifications are sent, alarms are triggered, and more. If you want the ENABLE 'd plugins to show by default on any browser, you should put them in the SHOW_PLUGINS variable. If you want to specifically disable a plugin (mainly a default plugin) you should place it in the DISABLE variable. You also can enable them manually on your Nightscout view from the hamburger menu. Authenticate and Save the settings on your browser. Below some default plugins: timeago , upbat , direction and delta . AR2 forecasting can be enabled/disabled from ... more about it here . Simple alarms are enabled by default if one of the BG_HIGH , BG_TARGET_TOP , BG_TARGET_BOTTOM , BG_LOW thresholds is set or ALARM_TYPES includes simple . You'll find the plugin in the hamburger menu. You can change thresholds in Profile editor . You can click the loudspeaker icon to test the alarms volume or to snooze an active alarm. Profile editor is available from the hamburger menu with the default variable profile . Database size allows you to monitor your free tier database size with the variable dbsize . The indication will not be accurate for other sizes than 512MiB unless you set it up correctly. See here .","title":"Default Plugins"},{"location":"nightscout/setup_variables/#advanced-plugins","text":"Care Portal plugin is an important plugin that gives access to the Log a treatment interface. Unlock it entering your API secret with the lock icon top right, then use the + icon to log a treatment. The variable required to enable it is careportal . Bolus Wizard plugin gives access to the Bolus Wizard interface. You can access it with the calculator icon top right. The variable required to enable it is boluscalc .","title":"Advanced Plugins"},{"location":"pages/hello.html/","text":"This is a page","title":"This is a Page"},{"location":"troubleshoot/connection_string/","text":"Unable to connect to Mongo \u2301 Common reasons: The database Heroku is pointing to is not available (like mLab after Nov 10th 2020). Your Atlas connection string is incorrect Open Heroku and Reveal Config Vars in Settings Search for a variable called MONGODB_URI or MONGO_CONNECTION . There should be only one of them, not both. If you migrated from mLab you should have MONGO_CONNECTION , if you deployed a brand new Nightscout it should be MONGODB_URI . Verify it is looking like this ( atlasusername , atlaspassword , dbname will be different from the example below). mongodb+srv://atlasusername:atlaspassword@cluster0.zzzzz.mongodb.net/dbname?retryWrites=true&w=majority Paste the string in the box below: Click the Analyze button: Analyze Analysis result will appear here. If the analysis result doesn't show any error, check below the data is what you actually wanted: Username: ... Password: ... Database: ... var sUser, sdB, sPwd; function Analyze() { var sString = \"Your connection string structure looks good.\"; var bErr = 0; var sAtlas = document.getElementById(\"myAtlas\").value; var iAS = sAtlas.search(\" \"); if(iAS!=-1) { sString = \"There should be no space characters in the string. Remove all spaces\"; bErr = 1; } iAS = sAtlas.search(\"mongodb://\"); if(iAS!=-1 && !bErr) { sString = \"This is not an Atlas connection string: it should start with mongodb+srv://\"; bErr = 1; } iAS = sAtlas.search(\"<password>\"); if(iAS!=-1 && !bErr) { sString = \"You should replace &lt;password&gt; with your actual Atlas database passwowrd in the Atlas string\"; bErr = 1; } iAS = sAtlas.search(\"<dbname>\"); if(iAS!=-1 && !bErr) { sString = \"You should replace &lt;dbname&gt; with your actual Atlas database name in the Atlas string\"; bErr = 1; } iAS = sAtlas.search(\"<\"); if(iAS!=-1 && !bErr) { sString = \"There should be no &lt; characters in the Atlas string\"; bErr = 1; } iAS = sAtlas.search(\">\"); if(iAS!=-1 && !bErr) { sString = \"There should be no &gt; characters in the Atlas string\"; bErr = 1; } iAS = sAtlas.search(\"retryWrites=true\"); if(iAS==-1 && !bErr) { sString = \"Your Atlas string should end with ?retryWrites=true&w=majority\"; bErr = 1; } var iUsr, iAt, iCol, idB, iQM; iUsr = sAtlas.search(\"://\"); if(iUsr==-1 && !bErr) { sString = \"Your Atlas string should start by mongodb+srv://\"; bErr = 1; } else { iUsr = iUsr + 3; sAtlas = sAtlas.substr(iUsr); } iAt = sAtlas.search(\"@\"); if(iAt==-1 && !bErr) { sString = \"Your Atlas string should contain @ after your password\"; bErr = 1; }; iCol = sAtlas.search(\":\"); if(iCol==-1 && !bErr) { sString = \"Your Atlas user and password should be separated by :\"; bErr = 1; }; iQm = sAtlas.search(\"\\\\?\"); if(iQm==-1 && !bErr) { sString = \"Your Atlas string should end with ?retryWrites=true&w=majority\"; bErr = 1; }; idB = sAtlas.search(\"net/\"); if(idB==-1 && !bErr) { sString = \"Your Atlas string should be in the mongodb.net domain\"; bErr = 1; } else idB = idB + 4; if(!bErr) { sUser = sAtlas.substring(0, iCol); sPwd = sAtlas.substring(iCol + 1, iAt); sdB = sAtlas.substring(idB, iQm); document.getElementById(\"myUser\").innerHTML = sUser; document.getElementById(\"myPwd\").innerHTML = sPwd; document.getElementById(\"mydB\").innerHTML = sdB; } document.getElementById(\"result\").innerHTML = sString; } Note If you migrated from mLab your username and database name should be identical. If you've just migrated to Atlas, try to use this help page to verify or recreate it. If you've just created a new site, try to use this help page to verify or recreate it. To recover your connection string log into Atlas Click Connect on your cluster Click Connect your application Click Copy then Close Open the the help page in a new tab and paste the string in the first field. If you don't remember your password invent a new one. Copy the resulting string in your Heroku variable MONGODB_URI or MONGO_CONNECTION If you changed the password in the string you need to change it in the database too: Click Database Access At the end of the line, click Edit In Password click Edit Password Write down your new password make it the same than the one in your connection string Click Update User Refresh your Nightscout web page display","title":"Connection failure"},{"location":"troubleshoot/connection_string/#unable-to-connect-to-mongo","text":"Common reasons: The database Heroku is pointing to is not available (like mLab after Nov 10th 2020). Your Atlas connection string is incorrect Open Heroku and Reveal Config Vars in Settings Search for a variable called MONGODB_URI or MONGO_CONNECTION . There should be only one of them, not both. If you migrated from mLab you should have MONGO_CONNECTION , if you deployed a brand new Nightscout it should be MONGODB_URI . Verify it is looking like this ( atlasusername , atlaspassword , dbname will be different from the example below). mongodb+srv://atlasusername:atlaspassword@cluster0.zzzzz.mongodb.net/dbname?retryWrites=true&w=majority Paste the string in the box below: Click the Analyze button: Analyze Analysis result will appear here. If the analysis result doesn't show any error, check below the data is what you actually wanted: Username: ... Password: ... Database: ... var sUser, sdB, sPwd; function Analyze() { var sString = \"Your connection string structure looks good.\"; var bErr = 0; var sAtlas = document.getElementById(\"myAtlas\").value; var iAS = sAtlas.search(\" \"); if(iAS!=-1) { sString = \"There should be no space characters in the string. Remove all spaces\"; bErr = 1; } iAS = sAtlas.search(\"mongodb://\"); if(iAS!=-1 && !bErr) { sString = \"This is not an Atlas connection string: it should start with mongodb+srv://\"; bErr = 1; } iAS = sAtlas.search(\"<password>\"); if(iAS!=-1 && !bErr) { sString = \"You should replace &lt;password&gt; with your actual Atlas database passwowrd in the Atlas string\"; bErr = 1; } iAS = sAtlas.search(\"<dbname>\"); if(iAS!=-1 && !bErr) { sString = \"You should replace &lt;dbname&gt; with your actual Atlas database name in the Atlas string\"; bErr = 1; } iAS = sAtlas.search(\"<\"); if(iAS!=-1 && !bErr) { sString = \"There should be no &lt; characters in the Atlas string\"; bErr = 1; } iAS = sAtlas.search(\">\"); if(iAS!=-1 && !bErr) { sString = \"There should be no &gt; characters in the Atlas string\"; bErr = 1; } iAS = sAtlas.search(\"retryWrites=true\"); if(iAS==-1 && !bErr) { sString = \"Your Atlas string should end with ?retryWrites=true&w=majority\"; bErr = 1; } var iUsr, iAt, iCol, idB, iQM; iUsr = sAtlas.search(\"://\"); if(iUsr==-1 && !bErr) { sString = \"Your Atlas string should start by mongodb+srv://\"; bErr = 1; } else { iUsr = iUsr + 3; sAtlas = sAtlas.substr(iUsr); } iAt = sAtlas.search(\"@\"); if(iAt==-1 && !bErr) { sString = \"Your Atlas string should contain @ after your password\"; bErr = 1; }; iCol = sAtlas.search(\":\"); if(iCol==-1 && !bErr) { sString = \"Your Atlas user and password should be separated by :\"; bErr = 1; }; iQm = sAtlas.search(\"\\\\?\"); if(iQm==-1 && !bErr) { sString = \"Your Atlas string should end with ?retryWrites=true&w=majority\"; bErr = 1; }; idB = sAtlas.search(\"net/\"); if(idB==-1 && !bErr) { sString = \"Your Atlas string should be in the mongodb.net domain\"; bErr = 1; } else idB = idB + 4; if(!bErr) { sUser = sAtlas.substring(0, iCol); sPwd = sAtlas.substring(iCol + 1, iAt); sdB = sAtlas.substring(idB, iQm); document.getElementById(\"myUser\").innerHTML = sUser; document.getElementById(\"myPwd\").innerHTML = sPwd; document.getElementById(\"mydB\").innerHTML = sdB; } document.getElementById(\"result\").innerHTML = sString; } Note If you migrated from mLab your username and database name should be identical. If you've just migrated to Atlas, try to use this help page to verify or recreate it. If you've just created a new site, try to use this help page to verify or recreate it. To recover your connection string log into Atlas Click Connect on your cluster Click Connect your application Click Copy then Close Open the the help page in a new tab and paste the string in the first field. If you don't remember your password invent a new one. Copy the resulting string in your Heroku variable MONGODB_URI or MONGO_CONNECTION If you changed the password in the string you need to change it in the database too: Click Database Access At the end of the line, click Edit In Password click Edit Password Write down your new password make it the same than the one in your connection string Click Update User Refresh your Nightscout web page display","title":"Unable to connect to Mongo"},{"location":"troubleshoot/troublehoot/","text":"Overall third party services \u2301 Before troubleshooting \u2301 Check the services you're using. Dexcom: https://status.dexcom.com/ Carelink US: https://carelink.minimed.com/ Carelink non-US: https://carelink.minimed.eu/app/login GitHub: https://www.githubstatus.com/ Heroku: https://status.heroku.com/ Atlas: https://status.cloud.mongodb.com/ GitHub and Heroku \u2301 A valid GitHub Directory could not be found. \u2301 When trying to deploy a new Nightscout site, this message appears when clicking Deploy to Heroku . Change browser and retry. Cannot find cgm-remote-monitor in Heroku / No GitHub source visible \u2301 When updating Nightscout, cgm-remote-monitor doesn't appear automatically in Heroku under your repository name. When updating Nightscout, your repository name doesn't appear in Manual Deploy so that you can't select the master branch. Disconnect and re- Connect like this: If it doesn't help try to re-authorize as explained below: Cannot find cgm-remote-monitor in Heroku: Item cannot be retrieved \u2301 When updating Nightscout, cgm-remote-monitor doesn't appear automatically in Heroku under your repository name and an error message appears when you try to connect to GitHub. In Heroku, go to Account Settings Select Applications and click Re-authorize Click Authorize GitHub in the pop-up. If it doesn't help, you can also try to Revoke access ... before going back to Re- Connect your GitHub account. This is necessary if someone else did setup Nightscout for you and left his own GitHub connected to your Heroku account. Atlas \u2301 Limit of one free cluster. \u2301 When creating a new site or migrating (usually not the first attempt), when reaching Target Cluster . Click the leaf top left in your Atlas account. Look at the Project Name you wanted to use when creating your new cluster, it shouldn't contain a cluster yet (like the example below, I tried to create a new Nightscout site but there is already a cluster inside the project I wanted to use). You can't have two clusters in a free project. Click your Project Name . This should not happen in normal conditions. Before deleting a cluster, check it doesn't contain your data! Click on Collections in the cluster you selected. Click on entries In the case there is data, like in the example below, don't use this cluster . Leave it like this and create a new one. If there no data , you can safely delete it. In this cluster you want to delete click ... then Terminate Copy the cluster name to confirm then click Terminate Wait until the operation completes. You can now use this project name to create a new site. Nightscout page doesn't open \u2301 Application Error \u2301 Update Nightscout to latest release . It might not fix your issue but it will help find a solution. If your site is already up to date, try to restart your app: log in Heroku, go to Settings , More , Restart all dynos . Boot Error - Unable to connect to Mongo \u2301 Look at this dedicated page . No data in Nightscout \u2301 Just after migrating from mLab to Atlas \u2301 If not already done, Update Nightscout to latest release . Verify your Atlas database is not read only, if migration went well on the first time it should be like this, else click Edit Change the permissions to Atlas Admin and Update User Dexcom data not showing \u2301 Dexcom Share \u2301 Make sure you have Dexcom Share turned ON in your Dexcom app. In the Dexcom app's main screen, find the triangle made of dots. If the dots are grey, you do not have Share turned on. Tap the triangle, and follow the directions to add a follower (yourself if you don't have someone else you'd like to invite) and turn on Share. If you are using a Dexcom system, and your data is not appearing in Nightscout, there are only a limited number of reasons for that. You should check your (1) Heroku settings and (2) Dexcom Share. NOTE: The #1 reason why BGs aren't showing is that you have mismatched password and user names in Heroku settings and Dexcom. Heroku Settings \u2301 Login to your Heroku account and from within Heroku Settings , click on the Reveal Config Vars Now from the Config Vars area, check the following (see screenshot below for reference): You must use the same BRIDGE_PASSWORD or BRIDGE_USER_NAME that your Dexcom mobile app is using. You must have bridge and careportal on the ENABLE line (you can have other values there...but don't forget these two). If you are outside the USA, you must add BRIDGE_SERVER set to EU in Heroku settings. Your careportal must be one word in the ENABLE line, sometimes autocorrect makes it two words. If using mmol , make sure you have spelled that value correctly in the DISPLAY_UNITS . One thing that can happen if you have an incorrect Dexcom login/password in your Share account settings and/or in your Nightscout BRIDGE settings is that Dexcom will lock your account...and you won't see CGM data in Nightscout. If you notice your CGM readings disappeared, but everything else is flowing...check your Heroku logs that are viewable by selecting \"View Logs\" from the drop-down menu underneath the \"More\" option. Do your logs have \"SSO authentication errors\" like in the red box highlighted above? If you do, then: Delete your BRIDGE entries within Heroku settings. Don't delete the variables, just delete the values of BRIDGE_PASSWORD and BRIDGE_USER_NAME. Wait 15 minutes and then follow the directions below. It is important to wait 15 minutes: the reason you can't log in right now is that your Dexcom account has a temporary lock from the passwords in the step above being incorrect. The temporary lock will expire after 10-15 minutes of giving the account login a break from the incorrect logins. So, definitely wait or else you'll just keep prolonging the issue. When you change these variables, Heroku restarts Nightscout. So now everything should work. About your Bridge password and user name The BRIDGE_PASSWORD and BRIDGE_USER_NAME are NOT visible from within your Dexcom mobile app or online account. The values of them are what you entered into your Dexcom mobile app when you VERY FIRST logged into that app however long ago. If you have double-checked everything else that could be incorrect and BGs still aren't showing in Nightscout, then you likely have those Bridge values incorrect. To fix that, delete your Dexcom app (don't stop the session before deleting the app...just keep it going). Download the app again from the iPhone's App Store and login to the freshly-downloaded Dexcom app. Take note that deleting the app will not stop your session, your session will pick right back up once the transmitter pairs again. The BRIDGE_USER_NAME is not an email address. Use that exact same login now in your Heroku settings. You can leave your Loop's Share account info blank...you just need the transmitter ID going forward. Dexcom username issue \u2301 It seems that Dexcom share somewhere in its systems is not capable of using the username other than ordinary letters. By changing the username, this has been solved for everyone who has tried so far. If that doesn't work for you, please report it at https://github.com/nightscout/cgm-remote-monitor/issues/5608 or if you can comment on any Facebook post that linked to this site. Change username \u2301 Unfortunately, it is not possible to change the username of a Dexcom account. You have to create a whole new account. Create new account \u2301 You can only associate one email address with a Dexcom account, so it might be a good idea to create a new email address and associate it to your current account so that you can use your current email with the new account. Go to https://www.dexcom.com and look for where to create accounts. Follow the instructions to create a new account. The alternative is to delete the old account. But do not do that. It may be good to be able to go back and retrieve historical data. Make sure the new username contains only letters. It is better to stick to a-z. We know that the period . underscore _ and at @ characters creates problems, but we do not know which other characters can create problems. Reinstall Dexcom Transmitter app \u2301 When you install the Dexcom app, it is linked to a Dexcom account. Unfortunately, there is no way to switch accounts. What you have to do is simply uninstall the app and reinstall it. In principle, it is the same procedure as changing phone. Of course, this time you should log in with the new account. Write down the current Transmitter ID. You can find the ID if you look in settings in the Dexcom app. Uninstall the Dexcom app Reinstall the Dexcom app Log in with your new account Follow the instructions in the app. For G6 do not select sensor code. The sensor code is already saved on your old transmitter. Enter the transmitter ID and wait for pairing Answer yes to the question \"have you inserted sensor\" You then have to re-invite your followers. Nightscout \u2301 Check your Heroku settings match your new credentials (see above) Dexcom or CareLink data stopping after a while \u2301 First verify you can see your BG in Clarity or CareLink. If data is present open Heroku and check you app didn't fall asleep. A sleeping might be due to your Heroku free plan: a Hobby plan makes the app never sleep. https://www.heroku.com/pricing If this is the case you will need to setup an uptime robot. https://uptimerobot.com/ Select Register for FREE and create an account. Check your email (also check the spam folder) and activate your account. Your dashboard will open, click + Add New Monitor In Monitor Type select HTTP(s) Add a Friendly Name (any), type your Nightscout site page then click Create Monitor You can enable your email address as an alert contact to inform you if your site goes down. After a moment your monitored site will show 100% up. This will keep your Heroku app active, but should the data source go down, it will not help getting data into it. Data timing issues \u2301 Basal is shifted in time \u2301 Check the time zone is correct for your currently active profile in your Nightscout Profile editor . Data in the future \u2301 Check you don't have data in the future with the Admin tools . Remove them if existing. If this isn't working, or shows no future data, check in Atlas Open your Nightscout cluster and select Collections In Entries type {date:-1} and click Find Delete the entries in the future (manually) with the bin icon Database full \u2301 Free databases like M0 Sandbox provided by Atlas will only hold a limited amount of data (512MB) and you will eventually need to manually cleanup. You can extend the capacity to 2 and 5GB paying an M2 or M5 Shared cluster. Make sure your Nightscout site has Database Size enabled to monitor database capacity. Look here for more information on this plugin. Check in Atlas Open your Nightscout cluster and select Collections Click your database name (hidden left). Check the DATABASE SIZE is indeed close to or at the limit then look at these three collections Documents size : devicestatus , entries and treatments . Open Nightscout Admin tools . Depending on the collection you identified above, choose which of the following you want to cleanup: You can cleanup (enter the number of days to keep) or delete your devices status: Same for Treatments : And Glucose entries . If you are reluctant to lose historical data you should consider opting for a paid database solution.","title":"Troubleshooting"},{"location":"troubleshoot/troublehoot/#overall-third-party-services","text":"","title":"Overall third party services"},{"location":"troubleshoot/troublehoot/#before-troubleshooting","text":"Check the services you're using. Dexcom: https://status.dexcom.com/ Carelink US: https://carelink.minimed.com/ Carelink non-US: https://carelink.minimed.eu/app/login GitHub: https://www.githubstatus.com/ Heroku: https://status.heroku.com/ Atlas: https://status.cloud.mongodb.com/","title":"Before troubleshooting"},{"location":"troubleshoot/troublehoot/#github-and-heroku","text":"","title":"GitHub and Heroku"},{"location":"troubleshoot/troublehoot/#a-valid-github-directory-could-not-be-found","text":"When trying to deploy a new Nightscout site, this message appears when clicking Deploy to Heroku . Change browser and retry.","title":"A valid GitHub Directory could not be found."},{"location":"troubleshoot/troublehoot/#cannot-find-cgm-remote-monitor-in-heroku-no-github-source-visible","text":"When updating Nightscout, cgm-remote-monitor doesn't appear automatically in Heroku under your repository name. When updating Nightscout, your repository name doesn't appear in Manual Deploy so that you can't select the master branch. Disconnect and re- Connect like this: If it doesn't help try to re-authorize as explained below:","title":"Cannot find cgm-remote-monitor in Heroku / No GitHub source visible"},{"location":"troubleshoot/troublehoot/#cannot-find-cgm-remote-monitor-in-heroku-item-cannot-be-retrieved","text":"When updating Nightscout, cgm-remote-monitor doesn't appear automatically in Heroku under your repository name and an error message appears when you try to connect to GitHub. In Heroku, go to Account Settings Select Applications and click Re-authorize Click Authorize GitHub in the pop-up. If it doesn't help, you can also try to Revoke access ... before going back to Re- Connect your GitHub account. This is necessary if someone else did setup Nightscout for you and left his own GitHub connected to your Heroku account.","title":"Cannot find cgm-remote-monitor in Heroku: Item cannot be retrieved"},{"location":"troubleshoot/troublehoot/#atlas","text":"","title":"Atlas"},{"location":"troubleshoot/troublehoot/#limit-of-one-free-cluster","text":"When creating a new site or migrating (usually not the first attempt), when reaching Target Cluster . Click the leaf top left in your Atlas account. Look at the Project Name you wanted to use when creating your new cluster, it shouldn't contain a cluster yet (like the example below, I tried to create a new Nightscout site but there is already a cluster inside the project I wanted to use). You can't have two clusters in a free project. Click your Project Name . This should not happen in normal conditions. Before deleting a cluster, check it doesn't contain your data! Click on Collections in the cluster you selected. Click on entries In the case there is data, like in the example below, don't use this cluster . Leave it like this and create a new one. If there no data , you can safely delete it. In this cluster you want to delete click ... then Terminate Copy the cluster name to confirm then click Terminate Wait until the operation completes. You can now use this project name to create a new site.","title":"Limit of one free cluster."},{"location":"troubleshoot/troublehoot/#nightscout-page-doesnt-open","text":"","title":"Nightscout page doesn't open"},{"location":"troubleshoot/troublehoot/#application-error","text":"Update Nightscout to latest release . It might not fix your issue but it will help find a solution. If your site is already up to date, try to restart your app: log in Heroku, go to Settings , More , Restart all dynos .","title":"Application Error"},{"location":"troubleshoot/troublehoot/#boot-error-unable-to-connect-to-mongo","text":"Look at this dedicated page .","title":"Boot Error - Unable to connect to Mongo"},{"location":"troubleshoot/troublehoot/#no-data-in-nightscout","text":"","title":"No data in Nightscout"},{"location":"troubleshoot/troublehoot/#just-after-migrating-from-mlab-to-atlas","text":"If not already done, Update Nightscout to latest release . Verify your Atlas database is not read only, if migration went well on the first time it should be like this, else click Edit Change the permissions to Atlas Admin and Update User","title":"Just after migrating from mLab to Atlas"},{"location":"troubleshoot/troublehoot/#dexcom-data-not-showing","text":"","title":"Dexcom data not showing"},{"location":"troubleshoot/troublehoot/#dexcom-share","text":"Make sure you have Dexcom Share turned ON in your Dexcom app. In the Dexcom app's main screen, find the triangle made of dots. If the dots are grey, you do not have Share turned on. Tap the triangle, and follow the directions to add a follower (yourself if you don't have someone else you'd like to invite) and turn on Share. If you are using a Dexcom system, and your data is not appearing in Nightscout, there are only a limited number of reasons for that. You should check your (1) Heroku settings and (2) Dexcom Share. NOTE: The #1 reason why BGs aren't showing is that you have mismatched password and user names in Heroku settings and Dexcom.","title":"Dexcom Share"},{"location":"troubleshoot/troublehoot/#heroku-settings","text":"Login to your Heroku account and from within Heroku Settings , click on the Reveal Config Vars Now from the Config Vars area, check the following (see screenshot below for reference): You must use the same BRIDGE_PASSWORD or BRIDGE_USER_NAME that your Dexcom mobile app is using. You must have bridge and careportal on the ENABLE line (you can have other values there...but don't forget these two). If you are outside the USA, you must add BRIDGE_SERVER set to EU in Heroku settings. Your careportal must be one word in the ENABLE line, sometimes autocorrect makes it two words. If using mmol , make sure you have spelled that value correctly in the DISPLAY_UNITS . One thing that can happen if you have an incorrect Dexcom login/password in your Share account settings and/or in your Nightscout BRIDGE settings is that Dexcom will lock your account...and you won't see CGM data in Nightscout. If you notice your CGM readings disappeared, but everything else is flowing...check your Heroku logs that are viewable by selecting \"View Logs\" from the drop-down menu underneath the \"More\" option. Do your logs have \"SSO authentication errors\" like in the red box highlighted above? If you do, then: Delete your BRIDGE entries within Heroku settings. Don't delete the variables, just delete the values of BRIDGE_PASSWORD and BRIDGE_USER_NAME. Wait 15 minutes and then follow the directions below. It is important to wait 15 minutes: the reason you can't log in right now is that your Dexcom account has a temporary lock from the passwords in the step above being incorrect. The temporary lock will expire after 10-15 minutes of giving the account login a break from the incorrect logins. So, definitely wait or else you'll just keep prolonging the issue. When you change these variables, Heroku restarts Nightscout. So now everything should work. About your Bridge password and user name The BRIDGE_PASSWORD and BRIDGE_USER_NAME are NOT visible from within your Dexcom mobile app or online account. The values of them are what you entered into your Dexcom mobile app when you VERY FIRST logged into that app however long ago. If you have double-checked everything else that could be incorrect and BGs still aren't showing in Nightscout, then you likely have those Bridge values incorrect. To fix that, delete your Dexcom app (don't stop the session before deleting the app...just keep it going). Download the app again from the iPhone's App Store and login to the freshly-downloaded Dexcom app. Take note that deleting the app will not stop your session, your session will pick right back up once the transmitter pairs again. The BRIDGE_USER_NAME is not an email address. Use that exact same login now in your Heroku settings. You can leave your Loop's Share account info blank...you just need the transmitter ID going forward.","title":"Heroku Settings"},{"location":"troubleshoot/troublehoot/#dexcom-username-issue","text":"It seems that Dexcom share somewhere in its systems is not capable of using the username other than ordinary letters. By changing the username, this has been solved for everyone who has tried so far. If that doesn't work for you, please report it at https://github.com/nightscout/cgm-remote-monitor/issues/5608 or if you can comment on any Facebook post that linked to this site.","title":"Dexcom username issue"},{"location":"troubleshoot/troublehoot/#change-username","text":"Unfortunately, it is not possible to change the username of a Dexcom account. You have to create a whole new account.","title":"Change username"},{"location":"troubleshoot/troublehoot/#create-new-account","text":"You can only associate one email address with a Dexcom account, so it might be a good idea to create a new email address and associate it to your current account so that you can use your current email with the new account. Go to https://www.dexcom.com and look for where to create accounts. Follow the instructions to create a new account. The alternative is to delete the old account. But do not do that. It may be good to be able to go back and retrieve historical data. Make sure the new username contains only letters. It is better to stick to a-z. We know that the period . underscore _ and at @ characters creates problems, but we do not know which other characters can create problems.","title":"Create new account"},{"location":"troubleshoot/troublehoot/#reinstall-dexcom-transmitter-app","text":"When you install the Dexcom app, it is linked to a Dexcom account. Unfortunately, there is no way to switch accounts. What you have to do is simply uninstall the app and reinstall it. In principle, it is the same procedure as changing phone. Of course, this time you should log in with the new account. Write down the current Transmitter ID. You can find the ID if you look in settings in the Dexcom app. Uninstall the Dexcom app Reinstall the Dexcom app Log in with your new account Follow the instructions in the app. For G6 do not select sensor code. The sensor code is already saved on your old transmitter. Enter the transmitter ID and wait for pairing Answer yes to the question \"have you inserted sensor\" You then have to re-invite your followers.","title":"Reinstall Dexcom Transmitter app"},{"location":"troubleshoot/troublehoot/#nightscout","text":"Check your Heroku settings match your new credentials (see above)","title":"Nightscout"},{"location":"troubleshoot/troublehoot/#dexcom-or-carelink-data-stopping-after-a-while","text":"First verify you can see your BG in Clarity or CareLink. If data is present open Heroku and check you app didn't fall asleep. A sleeping might be due to your Heroku free plan: a Hobby plan makes the app never sleep. https://www.heroku.com/pricing If this is the case you will need to setup an uptime robot. https://uptimerobot.com/ Select Register for FREE and create an account. Check your email (also check the spam folder) and activate your account. Your dashboard will open, click + Add New Monitor In Monitor Type select HTTP(s) Add a Friendly Name (any), type your Nightscout site page then click Create Monitor You can enable your email address as an alert contact to inform you if your site goes down. After a moment your monitored site will show 100% up. This will keep your Heroku app active, but should the data source go down, it will not help getting data into it.","title":"Dexcom or CareLink data stopping after a while"},{"location":"troubleshoot/troublehoot/#data-timing-issues","text":"","title":"Data timing issues"},{"location":"troubleshoot/troublehoot/#basal-is-shifted-in-time","text":"Check the time zone is correct for your currently active profile in your Nightscout Profile editor .","title":"Basal is shifted in time"},{"location":"troubleshoot/troublehoot/#data-in-the-future","text":"Check you don't have data in the future with the Admin tools . Remove them if existing. If this isn't working, or shows no future data, check in Atlas Open your Nightscout cluster and select Collections In Entries type {date:-1} and click Find Delete the entries in the future (manually) with the bin icon","title":"Data in the future"},{"location":"troubleshoot/troublehoot/#database-full","text":"Free databases like M0 Sandbox provided by Atlas will only hold a limited amount of data (512MB) and you will eventually need to manually cleanup. You can extend the capacity to 2 and 5GB paying an M2 or M5 Shared cluster. Make sure your Nightscout site has Database Size enabled to monitor database capacity. Look here for more information on this plugin. Check in Atlas Open your Nightscout cluster and select Collections Click your database name (hidden left). Check the DATABASE SIZE is indeed close to or at the limit then look at these three collections Documents size : devicestatus , entries and treatments . Open Nightscout Admin tools . Depending on the collection you identified above, choose which of the following you want to cleanup: You can cleanup (enter the number of days to keep) or delete your devices status: Same for Treatments : And Glucose entries . If you are reluctant to lose historical data you should consider opting for a paid database solution.","title":"Database full"},{"location":"update/migrate_azure/","text":"Heroku with Atlas migration is mandatory for Azure users. \u2301 You must migrate your existing mLab MongoDB, where all your Nightscout data are stored, to MongoDB Atlas before November 2020 . This is essential to keep your Nightscout functioning. Read this: https://github.com/nightscout/cgm-remote-monitor/wiki/mLab-discontinuation-FAQ#migrating-to-atlas-for-azure-users To migrate your database you can use the guide provided by mLab: https://docs.mlab.com/how-to-migrate-sandbox-databases-to-atlas/ Access your accounts from a computer. Do not change device/computer/browser during the upgrade! If you have issues with your current browser try another one. Important Prerequisite \u2301 Create a new Nightscout site with Heroku and Atlas. \u2301 Step 1: Azure \u2301 Login to Azure: https://azure.microsoft.com/account/ and Sign in . Enter email, password, Sign in and Stay signed in. Go to your Portal . Select App Services . Select your App. Select Configuration . In Connection strings click mongo . Click the copy icon then Cancel . MONGODB_URI \u2301 Also paste the value in the box below: Validate Click the Validate button above to verify your string Click validate Click validate var bmLAB = 0; var sUsr, sPwd; var sFinalString = \"Not defined yet\"; function ValidatemLab() { bmLab=0; var sString = \"Looks good! Verify your mLab user name and password below:\"; var sMongo = document.getElementById(\"myMongo\").value; var iS = sMongo.search(\"://\"); if(iS!=7) { sString = \"MONGODB_URI should start with mongodb://\"; } else { sMongo = sMongo.substring(2); var iE = sMongo.search(\"@\"); if(iE!=-1) { var sUsr = sMongo.substring(iS, iE); var iM = sUsr.search(\":\"); if(iM!=-1) { sPwd = sUsr.substring(iM + 1); sUsr = sUsr.substring(1,iM); bmLab=1; } else sString = \"MONGODB_URI should contain : between user and password\"; } else sString = \"MONGODB_URI should contain @ after the password\"; } document.getElementById(\"validmLab\").innerHTML = sString; if(bmLab==1) { document.getElementById(\"user\").innerHTML = sUsr; document.getElementById(\"pwd\").innerHTML = sPwd; } } Step 2: Heroku \u2301 Click this link to log in Heroku: https://id.heroku.com/login Insert mail and password then click Log In Select your Nightscout app name Go to Settings Click Reveal Config Vars Scroll down Config Vars until you\u2019ll see KEY and VALUE In KEY write MONGO_TEMP then paste in VALUE the text copied in Azure, click Add. It will look like: mongodb://username:password@database.mlab.com:port/username This new key will be inserted at the bottom of the list. Scroll down until you\u2019ll find a variable named MONGO_CONNECTION or MONGODB_URI . This variable has been automatically created at first Nightscout distribution on Heroku. We want to make a backup. It will look like: mongodb+srv://username:password@cluster-zzzzzzzz.xxxxx.mongodb.net/dbname?retryWrites=true&w=majority Copy the value of this variable. Scroll down Config Vars until you\u2019ll see KEY and VALUE In KEY write MONGODB_OLD then paste in VALUE We will not use it anymore unless migration fails and you want to roll back to your new Heroku Nightscout site. Step 3: mLab to Atlas \u2301 Log into mLab: https://mlab.com/login/ Leave the mLab window open as it is. Log into Atlas: https://account.mongodb.com/account/login (solve the puzzle if required). At the top left, click on the cog icon. Scroll down to Connect to mLab Authorize Atlas to connect to mLab The page will open on the connected mLab deployment On the right click ... in actions and select Configure Migration Click on Create or Select Target Project Click the drop down menu below Project and select Create New Project Insert your project name (not important) and click Confirm Project and Continue Click Import Database Users and Continue Enable Allow all IP addresses and click Allow All And Continue Click the drop down menu below Cluster and select Create most equivalent new cluster RECOMMENDED Click Confirm Target and Continue Be patient Click Confirm Source and Target Click Confirm and Continue Click Begin Test Run Wait for the test to finish (be patient) When available, click Confirm Connectivity Next step is critical Copy the new Atlas string and paste it in a safe place to avoid losing it. Click on the Copy button. Don\u2019t lose it We\u2019ll need it in Heroku later! MONGO_CONNECTION \u2301 Also paste the Atlas string in the box below: Validate Click the Validate button above to verify your string This is your username var bAtlas = 0; var sAusr; function ValidateAtlas() { bAtlas=0; var sString = \"Looks good! Verify your Atlas user name below:\"; var sAtlas = document.getElementById(\"myAtlas\").value; var sdB = document.getElementById(\"myAtlas\").value; var iAS = sAtlas.search(\"://\"); if(iAS!=11) { sString = \"Atlas URI should start with mongodb+srv://\"; } else { var iAP = sAtlas.search(\"<password>\"); if(iAP==-1) { sString = \"Atlas URI should contain &lt;password&gt;\"; } else { sString = sAtlas.substring(0,iAP); sFinalString = sString.concat(sPwd, sAtlas.substring(iAP+10)); bAtlas=1; } } if(bAtlas==1) { sAusr = sAtlas.substring(14, iAP-1); document.getElementById(\"auser\").innerHTML = sAusr; } document.getElementById(\"validAtlas\").innerHTML = \"Looks good! Verify your Atlas user name below is the same than mLab:\"; } Click Confirm And Continue Don\u2019t click anything on the next step without reading! Click the drop-down menu on the side of Confirm and Continue and select Confirm and Close ! Here we are, we\u2019ll now migrate mLab to Atlas Click Review Process and Begin Select I understand \u2026 and click Begin Migration (be patient and wait for migration to complete, won't be long) Done! Click Start Using Atlas Click I\u2019m Done Select both I understand \u2026 and I am not using \u2026 then click Confirm and Close Your window will update, database has been migrated to Atlas Step 4: Connection string \u2301 Go back to Settings in Heroku Click Reveal Config Vars Click Generate to show the string you will need to copy in MONGO_CONNECTION . Generate function Generate() { var sString = sFinalString; ValidatemLab(); ValidateAtlas(); if(bmLab==0) {sString = \"Validate the mLab string first\";} else if(bAtlas==0) {sString = \"Validate the Atlas string first\";} document.getElementById(\"result\").innerHTML = sString; } Note If you see Validate the mLab string first you need to go back there . Note If you see Validate the Atlas string first you need to go back there . If you didn't manage to generate the connection string you can try the helper page here . If you didn't manage to generate the connection string or you want to do it manually: Scroll down to MONGO_TEMP . The following operation is critical. You must insert the mLab password in your Atlas string. You have now two strings with this format (not these values). mongodb+srv://heroku_zzzzzzzz:<password>@cluster-zzzzzzzz.xxxxx.mongodb.net/heroku_zzzzzzzz?retryWrites=true&w=majority mongodb://heroku_zzzzzzzz:hfo7fbh6h3dummy6o60kvjojg0@yyyyyyyy.mlab.com:12345/heroku_zzzzzzzz Your password (do not copy it from this guide) is made of 26 characters (if you didn't customize it) in between : and @ . In the first string you should replace <password> , with your real password so that it will look like this: mongodb+srv://heroku_zzzzzzzz:hfo7fbh6h3dummy6o60kvjojg0@cluster-zzzzzzzz.xxxxx.mongodb.net/heroku_zzzzzzzz?retryWrites=true&w=majority Note there are no < and > remaining in this string! Connection string \u2301 Now find and edit the MONGO_CONNECTION variable (click the pen to edit it) Paste the resulting string and click Save changes Congratulations, you completed migration from Azure to Heroku and Atlas. Browse to your Nightscout site and wait 5 minutes for a new value to show up (make sure your uploader is sending data). Roll back to new (empty) Nightscout created as a prerequisite \u2301 ONLY IN CASE OF MIGRATION FAILURE If you've been running into issues and prefer to keep the original newly created Nighstcout site (and lose your old data) just replace the contents of MONGO_CONNECTION from MONGO_TEMP .","title":"Migrating from Azure"},{"location":"update/migrate_azure/#heroku-with-atlas-migration-is-mandatory-for-azure-users","text":"You must migrate your existing mLab MongoDB, where all your Nightscout data are stored, to MongoDB Atlas before November 2020 . This is essential to keep your Nightscout functioning. Read this: https://github.com/nightscout/cgm-remote-monitor/wiki/mLab-discontinuation-FAQ#migrating-to-atlas-for-azure-users To migrate your database you can use the guide provided by mLab: https://docs.mlab.com/how-to-migrate-sandbox-databases-to-atlas/ Access your accounts from a computer. Do not change device/computer/browser during the upgrade! If you have issues with your current browser try another one.","title":"Heroku with Atlas migration is mandatory for Azure users."},{"location":"update/migrate_azure/#important-prerequisite","text":"","title":"Important Prerequisite"},{"location":"update/migrate_azure/#create-a-new-nightscout-site-with-heroku-and-atlas","text":"","title":"Create a new Nightscout site with Heroku and Atlas."},{"location":"update/migrate_azure/#step-1-azure","text":"Login to Azure: https://azure.microsoft.com/account/ and Sign in . Enter email, password, Sign in and Stay signed in. Go to your Portal . Select App Services . Select your App. Select Configuration . In Connection strings click mongo . Click the copy icon then Cancel .","title":"Step 1: Azure"},{"location":"update/migrate_azure/#mongodb_uri","text":"Also paste the value in the box below: Validate Click the Validate button above to verify your string Click validate Click validate var bmLAB = 0; var sUsr, sPwd; var sFinalString = \"Not defined yet\"; function ValidatemLab() { bmLab=0; var sString = \"Looks good! Verify your mLab user name and password below:\"; var sMongo = document.getElementById(\"myMongo\").value; var iS = sMongo.search(\"://\"); if(iS!=7) { sString = \"MONGODB_URI should start with mongodb://\"; } else { sMongo = sMongo.substring(2); var iE = sMongo.search(\"@\"); if(iE!=-1) { var sUsr = sMongo.substring(iS, iE); var iM = sUsr.search(\":\"); if(iM!=-1) { sPwd = sUsr.substring(iM + 1); sUsr = sUsr.substring(1,iM); bmLab=1; } else sString = \"MONGODB_URI should contain : between user and password\"; } else sString = \"MONGODB_URI should contain @ after the password\"; } document.getElementById(\"validmLab\").innerHTML = sString; if(bmLab==1) { document.getElementById(\"user\").innerHTML = sUsr; document.getElementById(\"pwd\").innerHTML = sPwd; } }","title":"MONGODB_URI"},{"location":"update/migrate_azure/#step-2-heroku","text":"Click this link to log in Heroku: https://id.heroku.com/login Insert mail and password then click Log In Select your Nightscout app name Go to Settings Click Reveal Config Vars Scroll down Config Vars until you\u2019ll see KEY and VALUE In KEY write MONGO_TEMP then paste in VALUE the text copied in Azure, click Add. It will look like: mongodb://username:password@database.mlab.com:port/username This new key will be inserted at the bottom of the list. Scroll down until you\u2019ll find a variable named MONGO_CONNECTION or MONGODB_URI . This variable has been automatically created at first Nightscout distribution on Heroku. We want to make a backup. It will look like: mongodb+srv://username:password@cluster-zzzzzzzz.xxxxx.mongodb.net/dbname?retryWrites=true&w=majority Copy the value of this variable. Scroll down Config Vars until you\u2019ll see KEY and VALUE In KEY write MONGODB_OLD then paste in VALUE We will not use it anymore unless migration fails and you want to roll back to your new Heroku Nightscout site.","title":"Step 2: Heroku"},{"location":"update/migrate_azure/#step-3-mlab-to-atlas","text":"Log into mLab: https://mlab.com/login/ Leave the mLab window open as it is. Log into Atlas: https://account.mongodb.com/account/login (solve the puzzle if required). At the top left, click on the cog icon. Scroll down to Connect to mLab Authorize Atlas to connect to mLab The page will open on the connected mLab deployment On the right click ... in actions and select Configure Migration Click on Create or Select Target Project Click the drop down menu below Project and select Create New Project Insert your project name (not important) and click Confirm Project and Continue Click Import Database Users and Continue Enable Allow all IP addresses and click Allow All And Continue Click the drop down menu below Cluster and select Create most equivalent new cluster RECOMMENDED Click Confirm Target and Continue Be patient Click Confirm Source and Target Click Confirm and Continue Click Begin Test Run Wait for the test to finish (be patient) When available, click Confirm Connectivity Next step is critical Copy the new Atlas string and paste it in a safe place to avoid losing it. Click on the Copy button. Don\u2019t lose it We\u2019ll need it in Heroku later!","title":"Step 3: mLab to Atlas"},{"location":"update/migrate_azure/#mongo_connection","text":"Also paste the Atlas string in the box below: Validate Click the Validate button above to verify your string This is your username var bAtlas = 0; var sAusr; function ValidateAtlas() { bAtlas=0; var sString = \"Looks good! Verify your Atlas user name below:\"; var sAtlas = document.getElementById(\"myAtlas\").value; var sdB = document.getElementById(\"myAtlas\").value; var iAS = sAtlas.search(\"://\"); if(iAS!=11) { sString = \"Atlas URI should start with mongodb+srv://\"; } else { var iAP = sAtlas.search(\"<password>\"); if(iAP==-1) { sString = \"Atlas URI should contain &lt;password&gt;\"; } else { sString = sAtlas.substring(0,iAP); sFinalString = sString.concat(sPwd, sAtlas.substring(iAP+10)); bAtlas=1; } } if(bAtlas==1) { sAusr = sAtlas.substring(14, iAP-1); document.getElementById(\"auser\").innerHTML = sAusr; } document.getElementById(\"validAtlas\").innerHTML = \"Looks good! Verify your Atlas user name below is the same than mLab:\"; } Click Confirm And Continue Don\u2019t click anything on the next step without reading! Click the drop-down menu on the side of Confirm and Continue and select Confirm and Close ! Here we are, we\u2019ll now migrate mLab to Atlas Click Review Process and Begin Select I understand \u2026 and click Begin Migration (be patient and wait for migration to complete, won't be long) Done! Click Start Using Atlas Click I\u2019m Done Select both I understand \u2026 and I am not using \u2026 then click Confirm and Close Your window will update, database has been migrated to Atlas","title":"MONGO_CONNECTION"},{"location":"update/migrate_azure/#step-4-connection-string","text":"Go back to Settings in Heroku Click Reveal Config Vars Click Generate to show the string you will need to copy in MONGO_CONNECTION . Generate function Generate() { var sString = sFinalString; ValidatemLab(); ValidateAtlas(); if(bmLab==0) {sString = \"Validate the mLab string first\";} else if(bAtlas==0) {sString = \"Validate the Atlas string first\";} document.getElementById(\"result\").innerHTML = sString; } Note If you see Validate the mLab string first you need to go back there . Note If you see Validate the Atlas string first you need to go back there . If you didn't manage to generate the connection string you can try the helper page here . If you didn't manage to generate the connection string or you want to do it manually: Scroll down to MONGO_TEMP . The following operation is critical. You must insert the mLab password in your Atlas string. You have now two strings with this format (not these values). mongodb+srv://heroku_zzzzzzzz:<password>@cluster-zzzzzzzz.xxxxx.mongodb.net/heroku_zzzzzzzz?retryWrites=true&w=majority mongodb://heroku_zzzzzzzz:hfo7fbh6h3dummy6o60kvjojg0@yyyyyyyy.mlab.com:12345/heroku_zzzzzzzz Your password (do not copy it from this guide) is made of 26 characters (if you didn't customize it) in between : and @ . In the first string you should replace <password> , with your real password so that it will look like this: mongodb+srv://heroku_zzzzzzzz:hfo7fbh6h3dummy6o60kvjojg0@cluster-zzzzzzzz.xxxxx.mongodb.net/heroku_zzzzzzzz?retryWrites=true&w=majority Note there are no < and > remaining in this string!","title":"Step 4: Connection string"},{"location":"update/migrate_azure/#connection-string","text":"Now find and edit the MONGO_CONNECTION variable (click the pen to edit it) Paste the resulting string and click Save changes Congratulations, you completed migration from Azure to Heroku and Atlas. Browse to your Nightscout site and wait 5 minutes for a new value to show up (make sure your uploader is sending data).","title":"Connection string"},{"location":"update/migrate_azure/#roll-back-to-new-empty-nightscout-created-as-a-prerequisite","text":"ONLY IN CASE OF MIGRATION FAILURE If you've been running into issues and prefer to keep the original newly created Nighstcout site (and lose your old data) just replace the contents of MONGO_CONNECTION from MONGO_TEMP .","title":"Roll back to new (empty) Nightscout created as a prerequisite"},{"location":"update/migrate_heroku/","text":"Atlas migration is mandatory for Heroku users with mLab. \u2301 You must migrate your existing mLab MongoDB, where all your Nightscout data are stored, to MongoDB Atlas before November 2020 . This is essential to keep your Nightscout functioning. Read this: https://github.com/nightscout/cgm-remote-monitor/wiki/mLab-discontinuation-FAQ To migrate your database you can use the video provided by mLab: https://docs.mlab.com/how-to-migrate-nightscout-sandbox-heroku-addons-to-atlas/ Access your Heroku account from a computer. Do not change device/computer/browser during the upgrade! If you have issues with your current browser try another one. Important Prerequisite \u2301 Update your Nightscout to latest release! Step 1: Heroku \u2301 Click this link to login in Heroku: https://id.heroku.com/login Insert mail and password then click Log In Select your Nightscout app name Go to Settings Click Reveal Config Vars Scroll down until you\u2019ll find a variable named MONGO_CONNECTION or MONGODB_URI or MONGOLAB_URI or similar. This variable has been automatically created at first Nightscout distribution on Heroku. We want to make a backup. Copy the value of this variable, it will look like: mongodb://heroku_user:password@database.mlab.com:port/heroku_user Scroll down Config Vars until you\u2019ll see KEY and VALUE In KEY write MONGO_TEMP then paste in VALUE the text copied above, click Add This new key will be inserted at the bottom of the list. MONGODB_URI \u2301 Also paste the value in the box below: Validate Click the Validate button above to verify your string Click validate Click validate var bmLAB = 0; var sUsr, sPwd; var sFinalString = \"Not defined yet\"; function ValidatemLab() { bmLab=0; var sString = \"Looks good! Verify your mLab user name and password below:\"; var sMongo = document.getElementById(\"myMongo\").value; var iS = sMongo.search(\"://\"); if(iS!=7) { sString = \"MONGODB_URI should start with mongodb://\"; } else { sMongo = sMongo.substring(2); var iE = sMongo.search(\"@\"); if(iE!=-1) { var sUsr = sMongo.substring(iS, iE); var iM = sUsr.search(\":\"); if(iM!=-1) { sPwd = sUsr.substring(iM + 1); sUsr = sUsr.substring(1,iM); bmLab=1; } else sString = \"MONGODB_URI should contain : between user and password\"; } else sString = \"MONGODB_URI should contain @ after the password\"; } document.getElementById(\"validmLab\").innerHTML = sString; if(bmLab==1) { document.getElementById(\"user\").innerHTML = sUsr; document.getElementById(\"pwd\").innerHTML = sPwd; } } All good? Then create a last entry: Scroll down Config Vars until you\u2019ll see KEY and VALUE In KEY write MONGO_CONNECTION (leave the field VALUE empty) then click Add This new key will be inserted at the bottom of the list. We\u2019ll use it later. Now scroll all the way up and select Overview (top left) Click mLab MongoDB Another tab will open, from mLab. Leave it open . Go back to Heroku and select Settings Step 2: Atlas account \u2301 Now let\u2019s create an Atlas account. Do NOT close Heroku and mLab tabs, they MUST remain opened until the end of the migration. Open another tab at: https://www.mongodb.com/cloud/atlas and click Start Free Enter information then click Get Started Free If the following page shows up, choose a name for your organization (or leave default value). Click Skip . Scroll down and click Dismiss Step 3: mLab migration \u2301 Top left, click on the cog icon. Check the mLab tab is still opened. If it\u2019s on a login window, reopen it from Heroku. Scroll down to Connect to mLab Authorize Atlas to connect to mLab The page will open on the connected mLab deployment On the right click ... in actions and select Configure Migration Click on Create or Select Target Project Click the drop down menu below Project and select Create New Project Insert your project name (not important) and click Confirm Project and Continue Click Import Database Users and Continue Enable Allow all IP addresses and click Allow All And Continue Click the drop down menu below Cluster and select Create most equivalent new cluster RECOMMENDED Click Confirm Target and Continue Be patient Click Confirm Source and Target Click Confirm and Continue Click Begin Test Run Wait for the test to finish (be patient) When available, click Confirm Connectivity Next step is critical Copy the new Atlas string and paste it in a safe place to avoid losing it. Click on the Copy button. Don\u2019t lose it We\u2019ll need it in Heroku later! MONGO_CONNECTION \u2301 Also paste the Atlas string in the box below: Validate Click the Validate button above to verify your string This is your username var bAtlas = 0; var sAusr; function ValidateAtlas() { bAtlas=0; var sString = \"Looks good! Verify your Atlas user name below:\"; var sAtlas = document.getElementById(\"myAtlas\").value; var sdB = document.getElementById(\"myAtlas\").value; var iAS = sAtlas.search(\"://\"); if(iAS!=11) { sString = \"Atlas URI should start with mongodb+srv://\"; } else { var iAP = sAtlas.search(\"<password>\"); if(iAP==-1) { sString = \"Atlas URI should contain &lt;password&gt;\"; } else { sString = sAtlas.substring(0,iAP); sFinalString = sString.concat(sPwd, sAtlas.substring(iAP+10)); bAtlas=1; } } if(bAtlas==1) { sAusr = sAtlas.substring(14, iAP-1); document.getElementById(\"auser\").innerHTML = sAusr; } document.getElementById(\"validAtlas\").innerHTML = \"Looks good! Verify your Atlas user name below is the same than mLab:\"; } Click Confirm And Continue Don\u2019t click anything on the next step without reading! Click the drop-down menu on the side of Confirm and Continue and select Confirm and Close ! Here we are, we\u2019ll now migrate mLab to Atlas Click Review Process and Begin Select I understand \u2026 and click Begin Migration (be patient and wait for migration to complete, won't be long) Done! Click Start Using Atlas Click I\u2019m Done Select both I understand \u2026 and I am not using \u2026 then click Confirm and Close Your window will update, database has been migrated to Atlas Step 4: Connection string \u2301 Go back to Settings in Heroku Click Reveal Config Vars Click Generate to show the string you will need to copy in MONGO_CONNECTION . Generate function Generate() { var sString = sFinalString; ValidatemLab(); ValidateAtlas(); if(bmLab==0) {sString = \"Validate the mLab string first\";} else if(bAtlas==0) {sString = \"Validate the Atlas string first\";} document.getElementById(\"result\").innerHTML = sString; } Note If you see Validate the mLab string first you need to go back there . Note If you see Validate the Atlas string first you need to go back there . If you successfully generated the connection string, copy it and skip to here . If you didn't manage to generate the connection string you can try the helper page here . If you didn't manage to generate the connection string or you want to do it manually: Scroll down to MONGO_TEMP . The following operation is critical. You must insert the mLab password in your Atlas string. You have now two strings with this format (not these values). mongodb+srv://heroku_zzzzzzzz:<password>@cluster-zzzzzzzz.xxxxx.mongodb.net/heroku_zzzzzzzz?retryWrites=true&w=majority mongodb://heroku_zzzzzzzz:hfo7fbh6h3dummy6o60kvjojg0@yyyyyyyy.mlab.com:12345/heroku_zzzzzzzz Your password (do not copy it from this guide) is made of 26 characters (if you didn't customize it) in between : and @ . In the first string you should replace <password> , with your real password so that it will look like this: mongodb+srv://heroku_zzzzzzzz:hfo7fbh6h3dummy6o60kvjojg0@cluster-zzzzzzzz.xxxxx.mongodb.net/heroku_zzzzzzzz?retryWrites=true&w=majority Note there are no < and > remaining in this string! Connection string \u2301 Now find and edit the MONGO_CONNECTION variable (click the pen to edit it) Paste the resulting string and click Save changes Find the variable named MONGODB_URI or MONGOLAB_URI that you identified at the beginning and click the cross to delete it. Confirm with Delete Config Var Congratulations, you completed migration from mLab to Atlas. Browse to your Nightscout site and wait 5 minutes for a new value to show up (make sure your uploader is sending data). Step 5: Update Nightscout \u2301 If you didn't update Nightscout before migration Update your Nightscout to latest release! Versions older than 13.0.x won't probably run. Versions 13.x are not optimized for the Atlas database. Step 6: Delete mLab add-on (optional) \u2301 Warning MAKE SURE NIGHTSCOUT IS FULLY FUNCTIONAL BEFORE REMOVING THE ADD-ON If you want to complete the operation once you\u2019re sure everything is working well you can remove mLab from Heroku ( and this is not necessary ). For this, in Heroku go to Resources On the right of the mLab MongoDB line, click the drop down menu then Delete Add-on Write the name of your app to confirm, click Remove add-on Migration is complete and your Nightscout doesn't have anything to do with the old mLab database now.","title":"Migrating to Atlas"},{"location":"update/migrate_heroku/#atlas-migration-is-mandatory-for-heroku-users-with-mlab","text":"You must migrate your existing mLab MongoDB, where all your Nightscout data are stored, to MongoDB Atlas before November 2020 . This is essential to keep your Nightscout functioning. Read this: https://github.com/nightscout/cgm-remote-monitor/wiki/mLab-discontinuation-FAQ To migrate your database you can use the video provided by mLab: https://docs.mlab.com/how-to-migrate-nightscout-sandbox-heroku-addons-to-atlas/ Access your Heroku account from a computer. Do not change device/computer/browser during the upgrade! If you have issues with your current browser try another one.","title":"Atlas migration is mandatory for Heroku users with mLab."},{"location":"update/migrate_heroku/#important-prerequisite","text":"Update your Nightscout to latest release!","title":"Important Prerequisite"},{"location":"update/migrate_heroku/#step-1-heroku","text":"Click this link to login in Heroku: https://id.heroku.com/login Insert mail and password then click Log In Select your Nightscout app name Go to Settings Click Reveal Config Vars Scroll down until you\u2019ll find a variable named MONGO_CONNECTION or MONGODB_URI or MONGOLAB_URI or similar. This variable has been automatically created at first Nightscout distribution on Heroku. We want to make a backup. Copy the value of this variable, it will look like: mongodb://heroku_user:password@database.mlab.com:port/heroku_user Scroll down Config Vars until you\u2019ll see KEY and VALUE In KEY write MONGO_TEMP then paste in VALUE the text copied above, click Add This new key will be inserted at the bottom of the list.","title":"Step 1: Heroku"},{"location":"update/migrate_heroku/#mongodb_uri","text":"Also paste the value in the box below: Validate Click the Validate button above to verify your string Click validate Click validate var bmLAB = 0; var sUsr, sPwd; var sFinalString = \"Not defined yet\"; function ValidatemLab() { bmLab=0; var sString = \"Looks good! Verify your mLab user name and password below:\"; var sMongo = document.getElementById(\"myMongo\").value; var iS = sMongo.search(\"://\"); if(iS!=7) { sString = \"MONGODB_URI should start with mongodb://\"; } else { sMongo = sMongo.substring(2); var iE = sMongo.search(\"@\"); if(iE!=-1) { var sUsr = sMongo.substring(iS, iE); var iM = sUsr.search(\":\"); if(iM!=-1) { sPwd = sUsr.substring(iM + 1); sUsr = sUsr.substring(1,iM); bmLab=1; } else sString = \"MONGODB_URI should contain : between user and password\"; } else sString = \"MONGODB_URI should contain @ after the password\"; } document.getElementById(\"validmLab\").innerHTML = sString; if(bmLab==1) { document.getElementById(\"user\").innerHTML = sUsr; document.getElementById(\"pwd\").innerHTML = sPwd; } } All good? Then create a last entry: Scroll down Config Vars until you\u2019ll see KEY and VALUE In KEY write MONGO_CONNECTION (leave the field VALUE empty) then click Add This new key will be inserted at the bottom of the list. We\u2019ll use it later. Now scroll all the way up and select Overview (top left) Click mLab MongoDB Another tab will open, from mLab. Leave it open . Go back to Heroku and select Settings","title":"MONGODB_URI"},{"location":"update/migrate_heroku/#step-2-atlas-account","text":"Now let\u2019s create an Atlas account. Do NOT close Heroku and mLab tabs, they MUST remain opened until the end of the migration. Open another tab at: https://www.mongodb.com/cloud/atlas and click Start Free Enter information then click Get Started Free If the following page shows up, choose a name for your organization (or leave default value). Click Skip . Scroll down and click Dismiss","title":"Step 2: Atlas account"},{"location":"update/migrate_heroku/#step-3-mlab-migration","text":"Top left, click on the cog icon. Check the mLab tab is still opened. If it\u2019s on a login window, reopen it from Heroku. Scroll down to Connect to mLab Authorize Atlas to connect to mLab The page will open on the connected mLab deployment On the right click ... in actions and select Configure Migration Click on Create or Select Target Project Click the drop down menu below Project and select Create New Project Insert your project name (not important) and click Confirm Project and Continue Click Import Database Users and Continue Enable Allow all IP addresses and click Allow All And Continue Click the drop down menu below Cluster and select Create most equivalent new cluster RECOMMENDED Click Confirm Target and Continue Be patient Click Confirm Source and Target Click Confirm and Continue Click Begin Test Run Wait for the test to finish (be patient) When available, click Confirm Connectivity Next step is critical Copy the new Atlas string and paste it in a safe place to avoid losing it. Click on the Copy button. Don\u2019t lose it We\u2019ll need it in Heroku later!","title":"Step 3: mLab migration"},{"location":"update/migrate_heroku/#mongo_connection","text":"Also paste the Atlas string in the box below: Validate Click the Validate button above to verify your string This is your username var bAtlas = 0; var sAusr; function ValidateAtlas() { bAtlas=0; var sString = \"Looks good! Verify your Atlas user name below:\"; var sAtlas = document.getElementById(\"myAtlas\").value; var sdB = document.getElementById(\"myAtlas\").value; var iAS = sAtlas.search(\"://\"); if(iAS!=11) { sString = \"Atlas URI should start with mongodb+srv://\"; } else { var iAP = sAtlas.search(\"<password>\"); if(iAP==-1) { sString = \"Atlas URI should contain &lt;password&gt;\"; } else { sString = sAtlas.substring(0,iAP); sFinalString = sString.concat(sPwd, sAtlas.substring(iAP+10)); bAtlas=1; } } if(bAtlas==1) { sAusr = sAtlas.substring(14, iAP-1); document.getElementById(\"auser\").innerHTML = sAusr; } document.getElementById(\"validAtlas\").innerHTML = \"Looks good! Verify your Atlas user name below is the same than mLab:\"; } Click Confirm And Continue Don\u2019t click anything on the next step without reading! Click the drop-down menu on the side of Confirm and Continue and select Confirm and Close ! Here we are, we\u2019ll now migrate mLab to Atlas Click Review Process and Begin Select I understand \u2026 and click Begin Migration (be patient and wait for migration to complete, won't be long) Done! Click Start Using Atlas Click I\u2019m Done Select both I understand \u2026 and I am not using \u2026 then click Confirm and Close Your window will update, database has been migrated to Atlas","title":"MONGO_CONNECTION"},{"location":"update/migrate_heroku/#step-4-connection-string","text":"Go back to Settings in Heroku Click Reveal Config Vars Click Generate to show the string you will need to copy in MONGO_CONNECTION . Generate function Generate() { var sString = sFinalString; ValidatemLab(); ValidateAtlas(); if(bmLab==0) {sString = \"Validate the mLab string first\";} else if(bAtlas==0) {sString = \"Validate the Atlas string first\";} document.getElementById(\"result\").innerHTML = sString; } Note If you see Validate the mLab string first you need to go back there . Note If you see Validate the Atlas string first you need to go back there . If you successfully generated the connection string, copy it and skip to here . If you didn't manage to generate the connection string you can try the helper page here . If you didn't manage to generate the connection string or you want to do it manually: Scroll down to MONGO_TEMP . The following operation is critical. You must insert the mLab password in your Atlas string. You have now two strings with this format (not these values). mongodb+srv://heroku_zzzzzzzz:<password>@cluster-zzzzzzzz.xxxxx.mongodb.net/heroku_zzzzzzzz?retryWrites=true&w=majority mongodb://heroku_zzzzzzzz:hfo7fbh6h3dummy6o60kvjojg0@yyyyyyyy.mlab.com:12345/heroku_zzzzzzzz Your password (do not copy it from this guide) is made of 26 characters (if you didn't customize it) in between : and @ . In the first string you should replace <password> , with your real password so that it will look like this: mongodb+srv://heroku_zzzzzzzz:hfo7fbh6h3dummy6o60kvjojg0@cluster-zzzzzzzz.xxxxx.mongodb.net/heroku_zzzzzzzz?retryWrites=true&w=majority Note there are no < and > remaining in this string!","title":"Step 4: Connection string"},{"location":"update/migrate_heroku/#connection-string","text":"Now find and edit the MONGO_CONNECTION variable (click the pen to edit it) Paste the resulting string and click Save changes Find the variable named MONGODB_URI or MONGOLAB_URI that you identified at the beginning and click the cross to delete it. Confirm with Delete Config Var Congratulations, you completed migration from mLab to Atlas. Browse to your Nightscout site and wait 5 minutes for a new value to show up (make sure your uploader is sending data).","title":"Connection string"},{"location":"update/migrate_heroku/#step-5-update-nightscout","text":"If you didn't update Nightscout before migration Update your Nightscout to latest release! Versions older than 13.0.x won't probably run. Versions 13.x are not optimized for the Atlas database.","title":"Step 5: Update Nightscout"},{"location":"update/migrate_heroku/#step-6-delete-mlab-add-on-optional","text":"Warning MAKE SURE NIGHTSCOUT IS FULLY FUNCTIONAL BEFORE REMOVING THE ADD-ON If you want to complete the operation once you\u2019re sure everything is working well you can remove mLab from Heroku ( and this is not necessary ). For this, in Heroku go to Resources On the right of the mLab MongoDB line, click the drop down menu then Delete Add-on Write the name of your app to confirm, click Remove add-on Migration is complete and your Nightscout doesn't have anything to do with the old mLab database now.","title":"Step 6: Delete mLab add-on (optional)"},{"location":"update/redeploy/","text":"Redeploy your repository \u2301 If you prefer videos look at this one from Katie DiSimone. Step 1. Cleanup Github \u2301 Click here to log in at GitHub: https://github.com/login . Enter your username or email and your password. Click Sign in Select your own cgm-remote-monitor project (not nightscout/cgm-remote-monitor ) Click Settings Scroll down to Danger zone and click Delete this repository Copy and paste your full repository name to confirm then click I understand... Click this link to go to the official repository: https://github.com/nightscout/cgm-remote-monitor Click on Fork Wait for completion then leave GitHub open. Step 2: Deploy in Heroku \u2301 Log in Heroku https://id.heroku.com/login Select your app (hidden in yellow) Note: see this mLab message? Time to migrate to Atlas, it's mandatory! Click on Deploy Verify Heroku is connected to GitHub, if not, click Connect to GitHub If Heroku is not connected to GitHub, scroll down and click Connect to GitHub , if a popup window opens and requires authorization, click Authorize Heroku Type cgm-remote-monitor and click Search then click Connect If you have trouble connecting your app, click Disconnect and reconnect it as shown above Scroll down to the bottom of the page, select the master branch and click Deploy Branch Build will start and information will scroll in the log window. Do not leave the page, do not interfere and wait for completion. It might take more than 10 minutes. Interrupting the process will lead to a broken site and you'll need to restart deployment. Wait until the deploy process completes and click View Your site will open and should be at the latest version. You're done!","title":"Redeploying"},{"location":"update/redeploy/#redeploy-your-repository","text":"If you prefer videos look at this one from Katie DiSimone.","title":"Redeploy your repository"},{"location":"update/redeploy/#step-1-cleanup-github","text":"Click here to log in at GitHub: https://github.com/login . Enter your username or email and your password. Click Sign in Select your own cgm-remote-monitor project (not nightscout/cgm-remote-monitor ) Click Settings Scroll down to Danger zone and click Delete this repository Copy and paste your full repository name to confirm then click I understand... Click this link to go to the official repository: https://github.com/nightscout/cgm-remote-monitor Click on Fork Wait for completion then leave GitHub open.","title":"Step 1. Cleanup Github"},{"location":"update/redeploy/#step-2-deploy-in-heroku","text":"Log in Heroku https://id.heroku.com/login Select your app (hidden in yellow) Note: see this mLab message? Time to migrate to Atlas, it's mandatory! Click on Deploy Verify Heroku is connected to GitHub, if not, click Connect to GitHub If Heroku is not connected to GitHub, scroll down and click Connect to GitHub , if a popup window opens and requires authorization, click Authorize Heroku Type cgm-remote-monitor and click Search then click Connect If you have trouble connecting your app, click Disconnect and reconnect it as shown above Scroll down to the bottom of the page, select the master branch and click Deploy Branch Build will start and information will scroll in the log window. Do not leave the page, do not interfere and wait for completion. It might take more than 10 minutes. Interrupting the process will lead to a broken site and you'll need to restart deployment. Wait until the deploy process completes and click View Your site will open and should be at the latest version. You're done!","title":"Step 2: Deploy in Heroku"},{"location":"update/update/","text":"Updating Your Site to the Latest Version \u2301 Updating your website to the latest version (see here which is the current released version ) is easy with the update tool linked below. You can also use this video guide from Katie . It's corresponding to the Redeploy method you should try if failing with the one below. Requirements \u2301 This version of Nightscout will probably not run on anything older than these versions/platforms: Android 4 iOS 9 Chrome 68 Edge 17 Firefox 61 Safari 10 (macOS 10.12) Opera 54 Internet Explorer: none Azure Users \u2301 As of 0.12, Nightscout no longer readily supports the free Azure platform. If you really want to keep using Azure, don\u2019t update to this version. Read this https://github.com/nightscout/cgm-remote-monitor/wiki/mLab-discontinuation-FAQ It is recommended that you migrate to Heroku+Atlas . Step1: Update your repository in GitHub \u2301 Click here to log in at GitHub: https://github.com/login . Enter your username or email and your password. Click Sign in Select your own cgm-remote-monitor project (not nightscout/cgm-remote-monitor ) Your repository will open, note your GitHub username (hidden below in yellow). Scroll down until you see the Nightscout logo. Click Update your site Enter your GitHub username and click Check for updates If an update is available click Continue updating at GitHub Make sure you see GitHub user located! else check your username. If you know an update is available but you see Repo is Up to date , try the alternative method. A pop-up will open, just click OK (you can read the contents if you want, but this is explained below, so just click OK) Now comes the tricky part. Don't try to update cgm-remote-monitor with your own project! Make sure the left hand side repository is yours (name hidden in yellow) and the right hand side is nightscout/cgm-remote-monitor . Click Create pull request . A pull request opens. Last chance to check the left hand side repository is yours (name hidden in yellow) and right hand side is nightscout/cgm-remote-monitor , write a comment in the field (example Update or whatever you like) Scroll down and click Create pull request Scroll all the way down (it might be far away) and click Merge pull request Click Confirm merge A new line will appear in the pull requests log showing merge succeeded Your GitHub repository will show you're one commit ahead of the released version You have successfully updated your GitHub repository, now let's deploy it in Heroku. Step2: Deploy in Heroku \u2301 Log in Heroku https://id.heroku.com/login Select your app (hidden in yellow) Note: see this mLab message? Time to migrate to Atlas, it's mandatory! Click on Deploy Verify Heroku is connected to GitHub, if not, click Connect to GitHub If Heroku is not connected to GitHub, scroll down and click Connect to GitHub , if a popup window opens and requires authorization, click Authorize Heroku Verify your app cgm-remote-monitor is connected to GitHub If it isn't, In Connect to GitHub , type cgm-remote-monitor and click Search then click Connect If you have trouble connecting your app, click Disconnect and reconnect it as shown above Scroll down to the bottom of the page, select the master branch and click Deploy Branch Build will start and information will scroll in the log window. Do not leave the page, do not interfere and wait for completion. It might take more than 10 minutes. Interrupting the process will lead to a broken site and you'll need to restart deployment. Wait until the deploy process completes and click View Your site will open and should be at the latest version. You're done! Else, if you ran into trouble, try the Redeploy method","title":"Updating your site"},{"location":"update/update/#updating-your-site-to-the-latest-version","text":"Updating your website to the latest version (see here which is the current released version ) is easy with the update tool linked below. You can also use this video guide from Katie . It's corresponding to the Redeploy method you should try if failing with the one below.","title":"Updating Your Site to the Latest Version"},{"location":"update/update/#requirements","text":"This version of Nightscout will probably not run on anything older than these versions/platforms: Android 4 iOS 9 Chrome 68 Edge 17 Firefox 61 Safari 10 (macOS 10.12) Opera 54 Internet Explorer: none","title":"Requirements"},{"location":"update/update/#azure-users","text":"As of 0.12, Nightscout no longer readily supports the free Azure platform. If you really want to keep using Azure, don\u2019t update to this version. Read this https://github.com/nightscout/cgm-remote-monitor/wiki/mLab-discontinuation-FAQ It is recommended that you migrate to Heroku+Atlas .","title":"Azure Users"},{"location":"update/update/#step1-update-your-repository-in-github","text":"Click here to log in at GitHub: https://github.com/login . Enter your username or email and your password. Click Sign in Select your own cgm-remote-monitor project (not nightscout/cgm-remote-monitor ) Your repository will open, note your GitHub username (hidden below in yellow). Scroll down until you see the Nightscout logo. Click Update your site Enter your GitHub username and click Check for updates If an update is available click Continue updating at GitHub Make sure you see GitHub user located! else check your username. If you know an update is available but you see Repo is Up to date , try the alternative method. A pop-up will open, just click OK (you can read the contents if you want, but this is explained below, so just click OK) Now comes the tricky part. Don't try to update cgm-remote-monitor with your own project! Make sure the left hand side repository is yours (name hidden in yellow) and the right hand side is nightscout/cgm-remote-monitor . Click Create pull request . A pull request opens. Last chance to check the left hand side repository is yours (name hidden in yellow) and right hand side is nightscout/cgm-remote-monitor , write a comment in the field (example Update or whatever you like) Scroll down and click Create pull request Scroll all the way down (it might be far away) and click Merge pull request Click Confirm merge A new line will appear in the pull requests log showing merge succeeded Your GitHub repository will show you're one commit ahead of the released version You have successfully updated your GitHub repository, now let's deploy it in Heroku.","title":"Step1: Update your repository in GitHub"},{"location":"update/update/#step2-deploy-in-heroku","text":"Log in Heroku https://id.heroku.com/login Select your app (hidden in yellow) Note: see this mLab message? Time to migrate to Atlas, it's mandatory! Click on Deploy Verify Heroku is connected to GitHub, if not, click Connect to GitHub If Heroku is not connected to GitHub, scroll down and click Connect to GitHub , if a popup window opens and requires authorization, click Authorize Heroku Verify your app cgm-remote-monitor is connected to GitHub If it isn't, In Connect to GitHub , type cgm-remote-monitor and click Search then click Connect If you have trouble connecting your app, click Disconnect and reconnect it as shown above Scroll down to the bottom of the page, select the master branch and click Deploy Branch Build will start and information will scroll in the log window. Do not leave the page, do not interfere and wait for completion. It might take more than 10 minutes. Interrupting the process will lead to a broken site and you'll need to restart deployment. Wait until the deploy process completes and click View Your site will open and should be at the latest version. You're done! Else, if you ran into trouble, try the Redeploy method","title":"Step2: Deploy in Heroku"},{"location":"uploader/setup/","text":"Uploaders setup \u2301 Note You usually should express the Nightscout URL in secure https:// , not only http. Dexcom \u2301 In order to use the Dexcom Share servers to upload to Nightscout, you need to setup (and if not present add) the following variables in Heroku: From Settings , click on the Reveal Config Vars Verify, update or add these variables: You need to add bridge in the ENABLE variable. Do not delete other entries, just add bridge after a space. MOST COMMON ERRORS The BRIDGE_PASSWORD and BRIDGE_USER_NAME are NOT visible from within your Dexcom app or online account. The values for them are what you entered into your Dexcom mobile app when you VERY FIRST logged into that app however long ago. The BRIDGE_USER_NAME is not an email address. The most common error on initial Nightscout setups is that people incorrectly use an old account or an old password. To test your username and password, go to Dexcom's Clarity page (check here for USA accounts and here for the others ) and try logging into your Dexcom account. If your account info doesn't let you in, or you don't see data in your Clarity account...then you need to figure out your actual credentials before moving ahead. Password Some people have had problems with their bridge connecting when their Dexcom passwords are entirely numeric. If you have connection issues in that case, try changing your password to something with a mix of numbers and letters. You need at least one follower to use Dexcom Share. On your master phone, touch the Share icon, enable Sharing. If you have no follower, add one. You can also invite yourself. Medtronic CareLink \u2301 Log in Heroku. From Settings , click on the Reveal Config Vars You need to add mmconnect in the ENABLE variable. Do not delete other entries, just add bridge after a space. If you want to link your CareLink account as a data source, compile the following lines: You might want to setup additional fields for your pump. Medtronic 600 Series with uploader \u2301 You might want to setup additional fields for your pump. xDrip+ \u2301 Mind the syntax! https://APISecret@SiteURL.herokuapp.com/api/v1/ Glimp \u2301 Diabox \u2301 LinkBluCon \u2301 Tomato \u2301 Spike \u2301 Look here . xDrip4iOS \u2301","title":"Setup the uploader"},{"location":"uploader/setup/#uploaders-setup","text":"Note You usually should express the Nightscout URL in secure https:// , not only http.","title":"Uploaders setup"},{"location":"uploader/setup/#dexcom","text":"In order to use the Dexcom Share servers to upload to Nightscout, you need to setup (and if not present add) the following variables in Heroku: From Settings , click on the Reveal Config Vars Verify, update or add these variables: You need to add bridge in the ENABLE variable. Do not delete other entries, just add bridge after a space. MOST COMMON ERRORS The BRIDGE_PASSWORD and BRIDGE_USER_NAME are NOT visible from within your Dexcom app or online account. The values for them are what you entered into your Dexcom mobile app when you VERY FIRST logged into that app however long ago. The BRIDGE_USER_NAME is not an email address. The most common error on initial Nightscout setups is that people incorrectly use an old account or an old password. To test your username and password, go to Dexcom's Clarity page (check here for USA accounts and here for the others ) and try logging into your Dexcom account. If your account info doesn't let you in, or you don't see data in your Clarity account...then you need to figure out your actual credentials before moving ahead. Password Some people have had problems with their bridge connecting when their Dexcom passwords are entirely numeric. If you have connection issues in that case, try changing your password to something with a mix of numbers and letters. You need at least one follower to use Dexcom Share. On your master phone, touch the Share icon, enable Sharing. If you have no follower, add one. You can also invite yourself.","title":"Dexcom"},{"location":"uploader/setup/#medtronic-carelink","text":"Log in Heroku. From Settings , click on the Reveal Config Vars You need to add mmconnect in the ENABLE variable. Do not delete other entries, just add bridge after a space. If you want to link your CareLink account as a data source, compile the following lines: You might want to setup additional fields for your pump.","title":"Medtronic CareLink"},{"location":"uploader/setup/#medtronic-600-series-with-uploader","text":"You might want to setup additional fields for your pump.","title":"Medtronic 600 Series with uploader"},{"location":"uploader/setup/#xdrip","text":"Mind the syntax! https://APISecret@SiteURL.herokuapp.com/api/v1/","title":"xDrip+"},{"location":"uploader/setup/#glimp","text":"","title":"Glimp"},{"location":"uploader/setup/#diabox","text":"","title":"Diabox"},{"location":"uploader/setup/#linkblucon","text":"","title":"LinkBluCon"},{"location":"uploader/setup/#tomato","text":"","title":"Tomato"},{"location":"uploader/setup/#spike","text":"Look here .","title":"Spike"},{"location":"uploader/setup/#xdrip4ios","text":"","title":"xDrip4iOS"},{"location":"uploader/uploaders/","text":"Supported uploaders \u2301 Dexcom \u2301 (1) Dexcom G4 requires additional hardware, like a Wixel , an xDripKit or (2) an Android phone with an OTG cable connected to the receiver as described here . (3) Dexcom G4 Platinum (Share) requires you to carry the receiver to forward data to the uploader. Dexcom G5 and G6 with the Dexcom app on your phone will upload directly to Dexcom servers and won't need an uploader: Nightscout will get the information directly with the bridge plugin. You can use open source uploaders for your Dexcom sensor but no data will be sent to Clarity: Android: xDrip+ for G4 (1)(2)(3), G5 and G6. iOS: Spike and xDrip4iOS for G4 (1)(3), G5 and old G6 transmitters (not Firefly). Loop and AAPS will upload your data directly to Nightscout and will act as uploaders. Medtronic \u2301 If your sensor uploads to CareLink Nightscout will get the information directly with the mmconnect plugin. Else you'll need an Android phone connected with an OTG cable to your pump Bluetooth glucometer like this . Libre \u2301 Non Bluetooth Libre sensors need an additional transmitter device to send readings to the uploader. In release order you'll find these: LimiTTer , blueReader, blucon, miaomiao, Bubble and Droplet. Libre sensors The Libre environment is complex and evolves quickly. Make sure your sensor is compatible with the transmitter before buying hardware. Join the respective Facebook groups to decide which to use. All proprietary apps should support upload to Nightscout (LinkBluCon, Tomato, Diabox, eDroplet, ...). Setup your uploader . Open source apps xDrip+, Spike and xDrip4iOS support some of these devices. For using a Libre 2 sensor (EU only) without an additional transmitter: more information here . Eversense \u2301 You need ESEL with an Android phone.","title":"Uploaders"},{"location":"uploader/uploaders/#supported-uploaders","text":"","title":"Supported uploaders"},{"location":"uploader/uploaders/#dexcom","text":"(1) Dexcom G4 requires additional hardware, like a Wixel , an xDripKit or (2) an Android phone with an OTG cable connected to the receiver as described here . (3) Dexcom G4 Platinum (Share) requires you to carry the receiver to forward data to the uploader. Dexcom G5 and G6 with the Dexcom app on your phone will upload directly to Dexcom servers and won't need an uploader: Nightscout will get the information directly with the bridge plugin. You can use open source uploaders for your Dexcom sensor but no data will be sent to Clarity: Android: xDrip+ for G4 (1)(2)(3), G5 and G6. iOS: Spike and xDrip4iOS for G4 (1)(3), G5 and old G6 transmitters (not Firefly). Loop and AAPS will upload your data directly to Nightscout and will act as uploaders.","title":"Dexcom"},{"location":"uploader/uploaders/#medtronic","text":"If your sensor uploads to CareLink Nightscout will get the information directly with the mmconnect plugin. Else you'll need an Android phone connected with an OTG cable to your pump Bluetooth glucometer like this .","title":"Medtronic"},{"location":"uploader/uploaders/#libre","text":"Non Bluetooth Libre sensors need an additional transmitter device to send readings to the uploader. In release order you'll find these: LimiTTer , blueReader, blucon, miaomiao, Bubble and Droplet. Libre sensors The Libre environment is complex and evolves quickly. Make sure your sensor is compatible with the transmitter before buying hardware. Join the respective Facebook groups to decide which to use. All proprietary apps should support upload to Nightscout (LinkBluCon, Tomato, Diabox, eDroplet, ...). Setup your uploader . Open source apps xDrip+, Spike and xDrip4iOS support some of these devices. For using a Libre 2 sensor (EU only) without an additional transmitter: more information here .","title":"Libre"},{"location":"uploader/uploaders/#eversense","text":"You need ESEL with an Android phone.","title":"Eversense"},{"location":"vendor/components-bootstrap/","text":"Bootstrap \u2301 Shim repository for Bootstrap . This package just provides the basic Bootstrap JavaScript in the package. This means that although the stylesheets are there, you will be required to provide your own means of including the styles. Package Managers \u2301 Bower : components-bootstrap Component : components/bootstrap Composer : components/bootstrap","title":"Index"},{"location":"vendor/components-bootstrap/#bootstrap","text":"Shim repository for Bootstrap . This package just provides the basic Bootstrap JavaScript in the package. This means that although the stylesheets are there, you will be required to provide your own means of including the styles.","title":"Bootstrap"},{"location":"vendor/components-bootstrap/#package-managers","text":"Bower : components-bootstrap Component : components/bootstrap Composer : components/bootstrap","title":"Package Managers"},{"location":"vendor/octokat/","text":"Octokat.js \u2301 Octokat.js provides a minimal higher-level wrapper around GitHub's API . It is being developed in the context of github-bookeditor , an EPUB3 Textbook editor for GitHub. This package can also be used in nodejs or as an AMD module in the browser. Key Features \u2301 Works in nodejs , an AMD module in the browser, and as a bower library Handles text and binary files Exposes everything available via the GitHub API (repos, teams, events, hooks, emojis, etc.) Supports ETag caching Paged results Node-style callbacks as well as optional Promises (to avoid those debates) 100% of the GitHub API Starring and Following repositories, users, and organizations Editing Team and Organization Membership User/Org/Repo events and notifications Listeners for rate limit changes Public Keys Hooks (commit, comment, etc.) Uses Angular, jQuery, or native promises if available Markdown generation Preview APIs (Deployments, Teams, etc) Enterprise APIs For the full list of supported methods see the Travis tests , the ./test directory, or ./src/grammar.coffee . Usage \u2301 All asynchronous methods accept a Node.js-style callback and return a Common-JS Promise . In a browser without RequireJS \u2301 Create an Octokat instance. var octo = new Octokat({ username: \"USER_NAME\", password: \"PASSWORD\" }); var cb = function (err, val) { console.log(val); }; octo.zen.read(cb); octo.repos('philschatz', 'octokat.js').fetch(cb); // Fetch repo info octo.me.starred('philschatz', 'octokat.js').add(cb); // Star a repo Or if you prefer OAuth: var octo = new Octokat({ token: \"OAUTH_TOKEN\" }); In a browser using RequireJS \u2301 define(['octokat'], function(Octokat) { var octo = new Octokat({ username: \"YOU_USER\", password: \"YOUR_PASSWORD\" }); }); In Node.js \u2301 Install instructions: npm install octokat --save var Octokat = require('octokat'); var octo = new Octokat({ username: \"YOU_USER\", password: \"YOUR_PASSWORD\" }); var cb = function (err, val) { console.log(val); }; octo.zen.read(cb); octo.repos('philschatz', 'octokat.js').fetch(cb); // Fetch repo info octo.me.starred('philschatz', 'octokat.js').add(cb); // Star a repo Using Generators in Node.js 0.11 (or EcmaScript 6 browsers) \u2301 This requires Node.js 0.11 with the --harmony-generators flag: var co = require('co'); var Octokat = require('octokat'); var octo = new Octokat(); var fn = function *() { var zen = yield octo.zen.read(); var info = yield octo.repos('philschatz', 'octokat.js').fetch(); console.log(zen); console.log(info); }; co(fn)(); Using bower \u2301 This file can be included using the bower package manager: bower install octokat --save Setup \u2301 This is all you need to get up and running: <script src=\"../dist/octokat.js\"></script> <script> var octo = new Octokat(); octo.zen.read(function(err, message) { if (err) { throw new Error(err); } alert(message); }); </script> Promises (Optional) \u2301 octokat.js has the following optional dependencies when used in a browser: A Promise API (supports jQuery, AngularJS, or a Promise polyfill) If you are already using jQuery or AngularJS in your project just be sure to include them before Octokat and it will use their Promise API. Otherwise, you can include a Promise polyfill like jakearchibald/es6-promise : <script src=\"./node_modules/es6-promise/dist/promise-0.1.2.js\"></script> <script src=\"./octokat.js\"> Preview new APIs \u2301 To use the APIs available for preview just add a acceptHeader when instantiating Octokat. For example: var octo = new Octokat({ token: 'API_TOKEN' acceptHeader: 'application/vnd.github.cannonball-preview+json' }); Enterprise APIs \u2301 To use the Enterprise APIs add the root URL when instantiating Octokat: var octo = new Octokat({ token: 'API_TOKEN' rootUrl: 'https://example.com/api/v3/' }); Testing \u2301 npm test will run the mocha tests for Node.js and the browser. Additionally, they can be run in the browser by starting a web server and going to ./test/index.html . About the Library \u2301 Overview \u2301 This library closely mirrors the https://developer.github.com/v3 documentation. For example, GET /repos/:owner/:repo becomes octo.repos(owner, repo).fetch() and POST /repos/:owner/:repo/issues/:number/comments becomes octo.repos(owner, repo).issues(number).comments.create(params) . Promises and Callbacks \u2301 This library supports Node.js-style callbacks as well as Promises. To use a callback, just specify it as the last argument to a method. To use a Promise, do not specify a callback and the return value will be a Promise. Example (get information on a repo): # Using callbacks octo.repos('philschatz', 'octokat.js').fetch (err, repo) -> console.error(err) if err # Do fancy stuff... # Using Promises octo.repos('philschatz', 'octokat.js').fetch() .then (repo) -> # Do fancy stuff .then null, (err) -> console.error(err) Chaining \u2301 You construct the URL by chaining properties and methods together and an async call is made once a verb method is called (see below). Example: octo = new Octokat() repo = octo.repos('philschatz', 'octokat.js') # Check if the current user is a collaborator on a repo repo.collaborators.contains(USER) .then (isCollaborator) -> # If not, then star the Repo unless isCollaborator repo.star.add() .then () -> # Done! Or, update a specific comment: octo = new Octokat(token: ...) octo.repos('philschatz', 'octokat.js').issues(1).comments(123123).update(body: 'Hello') .then () -> # Done! The basic structure of these methods is: .foos.fetch({optionalStuff:...}) yields a list of items (possibly paginated) .foos(id).fetch(...) yields a single item (issue, repo, user) .foos.contains(id) tests membership in a list (yields true/false) .foos.create(...) creates a new foo .foos(id).add() adds an existing User/Repo to the list .foos(id).remove() removes a member from a list or deletes the object and yields a boolean indicating success JSON with methods (Hypermedia) \u2301 GitHub provides URL patterns in its JSON responses. These are automatically converted into methods. For example: octo.repos('philschatz', 'octokat.js').fetch() .then (repo) -> # GitHub returns a JSON which contains something like compare_url: 'https://..../compare/{head}...{base} # This is converted to a method that accepts 2 arguments repo.compare(sha1, sha2).fetch() .then (comparison) -> # Done! Paged Results \u2301 If a .fetch() returns paged results then nextPage() , previousPage() , firstPage() and lastPage() are added to the returned JSON. For example: octo.repos('philschatz', 'octokat.js').commits.fetch() .then (someCommits) -> someCommits.nextPage() .then (moreCommits) -> # Done! Development \u2301 Run npm install Run grunt dist to generate the files in the ./dist directory The unit tests are named to illustrate examples of using the API. See Travis tests or run npm test to see them. linkedin/sepia is used to generate recorded results from GitHub and philschatz/sepia.js uses them in the browser. If you are adding tests be sure to include the updated fixtures in the Pull Request.","title":"Octokat.js [![Build Status](https://travis-ci.org/philschatz/octokat.js.png)](https://travis-ci.org/philschatz/octokat.js)"},{"location":"vendor/octokat/#octokatjs","text":"Octokat.js provides a minimal higher-level wrapper around GitHub's API . It is being developed in the context of github-bookeditor , an EPUB3 Textbook editor for GitHub. This package can also be used in nodejs or as an AMD module in the browser.","title":"Octokat.js"},{"location":"vendor/octokat/#key-features","text":"Works in nodejs , an AMD module in the browser, and as a bower library Handles text and binary files Exposes everything available via the GitHub API (repos, teams, events, hooks, emojis, etc.) Supports ETag caching Paged results Node-style callbacks as well as optional Promises (to avoid those debates) 100% of the GitHub API Starring and Following repositories, users, and organizations Editing Team and Organization Membership User/Org/Repo events and notifications Listeners for rate limit changes Public Keys Hooks (commit, comment, etc.) Uses Angular, jQuery, or native promises if available Markdown generation Preview APIs (Deployments, Teams, etc) Enterprise APIs For the full list of supported methods see the Travis tests , the ./test directory, or ./src/grammar.coffee .","title":"Key Features"},{"location":"vendor/octokat/#usage","text":"All asynchronous methods accept a Node.js-style callback and return a Common-JS Promise .","title":"Usage"},{"location":"vendor/octokat/#in-a-browser-without-requirejs","text":"Create an Octokat instance. var octo = new Octokat({ username: \"USER_NAME\", password: \"PASSWORD\" }); var cb = function (err, val) { console.log(val); }; octo.zen.read(cb); octo.repos('philschatz', 'octokat.js').fetch(cb); // Fetch repo info octo.me.starred('philschatz', 'octokat.js').add(cb); // Star a repo Or if you prefer OAuth: var octo = new Octokat({ token: \"OAUTH_TOKEN\" });","title":"In a browser without RequireJS"},{"location":"vendor/octokat/#in-a-browser-using-requirejs","text":"define(['octokat'], function(Octokat) { var octo = new Octokat({ username: \"YOU_USER\", password: \"YOUR_PASSWORD\" }); });","title":"In a browser using RequireJS"},{"location":"vendor/octokat/#in-nodejs","text":"Install instructions: npm install octokat --save var Octokat = require('octokat'); var octo = new Octokat({ username: \"YOU_USER\", password: \"YOUR_PASSWORD\" }); var cb = function (err, val) { console.log(val); }; octo.zen.read(cb); octo.repos('philschatz', 'octokat.js').fetch(cb); // Fetch repo info octo.me.starred('philschatz', 'octokat.js').add(cb); // Star a repo","title":"In Node.js"},{"location":"vendor/octokat/#using-generators-in-nodejs-011-or-ecmascript-6-browsers","text":"This requires Node.js 0.11 with the --harmony-generators flag: var co = require('co'); var Octokat = require('octokat'); var octo = new Octokat(); var fn = function *() { var zen = yield octo.zen.read(); var info = yield octo.repos('philschatz', 'octokat.js').fetch(); console.log(zen); console.log(info); }; co(fn)();","title":"Using Generators in Node.js 0.11 (or EcmaScript 6 browsers)"},{"location":"vendor/octokat/#using-bower","text":"This file can be included using the bower package manager: bower install octokat --save","title":"Using bower"},{"location":"vendor/octokat/#setup","text":"This is all you need to get up and running: <script src=\"../dist/octokat.js\"></script> <script> var octo = new Octokat(); octo.zen.read(function(err, message) { if (err) { throw new Error(err); } alert(message); }); </script>","title":"Setup"},{"location":"vendor/octokat/#promises-optional","text":"octokat.js has the following optional dependencies when used in a browser: A Promise API (supports jQuery, AngularJS, or a Promise polyfill) If you are already using jQuery or AngularJS in your project just be sure to include them before Octokat and it will use their Promise API. Otherwise, you can include a Promise polyfill like jakearchibald/es6-promise : <script src=\"./node_modules/es6-promise/dist/promise-0.1.2.js\"></script> <script src=\"./octokat.js\">","title":"Promises (Optional)"},{"location":"vendor/octokat/#preview-new-apis","text":"To use the APIs available for preview just add a acceptHeader when instantiating Octokat. For example: var octo = new Octokat({ token: 'API_TOKEN' acceptHeader: 'application/vnd.github.cannonball-preview+json' });","title":"Preview new APIs"},{"location":"vendor/octokat/#enterprise-apis","text":"To use the Enterprise APIs add the root URL when instantiating Octokat: var octo = new Octokat({ token: 'API_TOKEN' rootUrl: 'https://example.com/api/v3/' });","title":"Enterprise APIs"},{"location":"vendor/octokat/#testing","text":"npm test will run the mocha tests for Node.js and the browser. Additionally, they can be run in the browser by starting a web server and going to ./test/index.html .","title":"Testing"},{"location":"vendor/octokat/#about-the-library","text":"","title":"About the Library"},{"location":"vendor/octokat/#overview","text":"This library closely mirrors the https://developer.github.com/v3 documentation. For example, GET /repos/:owner/:repo becomes octo.repos(owner, repo).fetch() and POST /repos/:owner/:repo/issues/:number/comments becomes octo.repos(owner, repo).issues(number).comments.create(params) .","title":"Overview"},{"location":"vendor/octokat/#promises-and-callbacks","text":"This library supports Node.js-style callbacks as well as Promises. To use a callback, just specify it as the last argument to a method. To use a Promise, do not specify a callback and the return value will be a Promise. Example (get information on a repo): # Using callbacks octo.repos('philschatz', 'octokat.js').fetch (err, repo) -> console.error(err) if err # Do fancy stuff... # Using Promises octo.repos('philschatz', 'octokat.js').fetch() .then (repo) -> # Do fancy stuff .then null, (err) -> console.error(err)","title":"Promises and Callbacks"},{"location":"vendor/octokat/#chaining","text":"You construct the URL by chaining properties and methods together and an async call is made once a verb method is called (see below). Example: octo = new Octokat() repo = octo.repos('philschatz', 'octokat.js') # Check if the current user is a collaborator on a repo repo.collaborators.contains(USER) .then (isCollaborator) -> # If not, then star the Repo unless isCollaborator repo.star.add() .then () -> # Done! Or, update a specific comment: octo = new Octokat(token: ...) octo.repos('philschatz', 'octokat.js').issues(1).comments(123123).update(body: 'Hello') .then () -> # Done! The basic structure of these methods is: .foos.fetch({optionalStuff:...}) yields a list of items (possibly paginated) .foos(id).fetch(...) yields a single item (issue, repo, user) .foos.contains(id) tests membership in a list (yields true/false) .foos.create(...) creates a new foo .foos(id).add() adds an existing User/Repo to the list .foos(id).remove() removes a member from a list or deletes the object and yields a boolean indicating success","title":"Chaining"},{"location":"vendor/octokat/#json-with-methods-hypermedia","text":"GitHub provides URL patterns in its JSON responses. These are automatically converted into methods. For example: octo.repos('philschatz', 'octokat.js').fetch() .then (repo) -> # GitHub returns a JSON which contains something like compare_url: 'https://..../compare/{head}...{base} # This is converted to a method that accepts 2 arguments repo.compare(sha1, sha2).fetch() .then (comparison) -> # Done!","title":"JSON with methods (Hypermedia)"},{"location":"vendor/octokat/#paged-results","text":"If a .fetch() returns paged results then nextPage() , previousPage() , firstPage() and lastPage() are added to the returned JSON. For example: octo.repos('philschatz', 'octokat.js').commits.fetch() .then (someCommits) -> someCommits.nextPage() .then (moreCommits) -> # Done!","title":"Paged Results"},{"location":"vendor/octokat/#development","text":"Run npm install Run grunt dist to generate the files in the ./dist directory The unit tests are named to illustrate examples of using the API. See Travis tests or run npm test to see them. linkedin/sepia is used to generate recorded results from GitHub and philschatz/sepia.js uses them in the browser. If you are adding tests be sure to include the updated fixtures in the Pull Request.","title":"Development"}]}